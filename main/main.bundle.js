(()=>{"use strict";var n={800:(n,e,t)=>{t.d(e,{Z:()=>E});var o=t(537),r=t.n(o),i=t(645),a=t.n(i),c=t(667),s=t.n(c),A=new URL(t(790),t.b),u=new URL(t(373),t.b),l=new URL(t(516),t.b),d=new URL(t(82),t.b),p=new URL(t(837),t.b),f=a()(r()),g=s()(A),v=s()(u),m=s()(l),h=s()(d),b=s()(p);f.push([n.id,":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url("+g+");\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url("+v+");\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url("+m+");\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url("+h+") !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url("+b+") !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n","",{version:3,sources:["webpack://./playground/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n  --accent-color: rgb(240, 68, 5);\n  --accent-dark-color: rgb(140, 39, 3);\n  --error-color: #b3261e;\n  --font-family: 'Fira Mono', monospace;\n  --font-family-consolas: Consolas, 'Liberation Mono', Menlo, Courier, monospace;\n}\n\nbody {\n  width: 100%;\n  height: 100%;\n  cursor: default;\n  margin: 0px;\n  padding: 0px;\n  background-color: #f2f2f7;\n  color: #000;\n  font-size: 14px;\n  position: relative;\n  overflow-x: hidden;\n  font-weight: 400;\n  font-family: var(--font-family);\n  padding-bottom: 24px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.container {\n  width: calc(100% - 128px);\n  max-width: 1536px;\n  margin: 0 auto;\n}\n\n.medium-container {\n  width: calc(100% - 32px);\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n#navbar {\n  width: 100%;\n  height: 96px;\n  background-color: #fff;\n}\n\n#navbar a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#navbar .container {\n  display: flex;\n  align-items: center;\n  height: 100%;\n}\n\n#navbar-chevron {\n  width: 24px;\n  height: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-image: url(../resources/chevron_right.svg);\n  opacity: 0.2;\n  margin-left: 8px;\n}\n\n#navbar .logo-ref {\n  width: max-content;\n}\n\n#navbar .logo {\n  width: 196px;\n  margin-top: 2px;\n}\n\n@media only screen and (max-width: 700px) {\n  #navbar {\n    height: auto;\n  }\n\n  #navbar .container {\n    flex-direction: column;\n    align-items: center;\n  }\n\n  #navbar .logo-ref {\n    margin-top: 32px;\n  }\n\n  #navbar .logo {\n    margin-top: 0;\n    width: 256px;\n  }\n\n  #navbar #navbar-chevron {\n    transform: rotate(90deg);\n  }\n\n  #navbar #playground-actions {\n    margin-left: 0;\n    margin: 32px 0px;\n  }\n}\n\nh1,\nh2 {\n  font-weight: 700;\n  color: #0d102b;\n}\nh1 {\n  font-size: 24px;\n}\nh2 {\n  font-size: 20px;\n}\n\n.content {\n  height: 100vh;\n  width: calc(100% - 64px);\n  max-width: 960px;\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n}\n\n.github-card {\n  display: flex;\n  align-items: center;\n  border-radius: 8px;\n  user-select: none;\n  padding: 8px;\n}\n\n.github-card:hover {\n  background-color: rgba(0, 0, 0, 0.06);\n  transition: 0.15s;\n}\n\n.github-card:active,\n.github-card:focus {\n  background-color: rgba(0, 0, 0, 0.12);\n  transition: 0.15s;\n}\n\n.github-card::before {\n  display: block;\n  content: '';\n  width: 32px;\n  height: 32px;\n  background-image: url(../resources/github_icon.svg);\n  background-size: 24px;\n  background-repeat: no-repeat;\n  background-position: center;\n  margin-right: 4px;\n}\n\n#playground-actions {\n  display: flex;\n  align-items: center;\n  column-gap: 16px;\n  margin-left: auto;\n}\n\n.button {\n  width: fit-content;\n  height: fit-content;\n  padding: 12px 20px;\n  border-radius: 6px;\n  outline: none;\n  margin: none;\n  border: none;\n  font-size: 14px;\n  font-family: var(--font-family);\n  transition: 0.15s background-color;\n  font-weight: 600;\n}\n\n.orange-button {\n  background-color: var(--accent-color);\n  color: #fff;\n  border: 2px solid transparent;\n}\n\n.orange-button-outlined {\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  background-color: transparent;\n}\n\n.orange-button:hover,\n.orange-button:active,\n.orange-button:focus {\n  background-color: var(--accent-dark-color);\n}\n\n.orange-button-outlined:hover,\n.orange-button-outlined:active,\n.orange-button-outlined:focus {\n  background-color: rgba(240, 68, 5, 0.12);\n}\n\n.content-card {\n  overflow: hidden;\n}\n\n.content-card-header {\n  font-size: 20px;\n  font-weight: 600;\n  padding: var(--content-card-padding);\n}\n\n#result {\n  overflow: hidden;\n  margin: 96px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  --bot-icon-color: #4caf50;\n  --bot-icon-url: url(../resources/robot-off-outline.svg);\n}\n\n.result-detected {\n  --bot-icon-color: #f44336 !important;\n  --bot-icon-url: url(../resources/robot-outline.svg) !important;\n}\n\n.result-error {\n  --bot-icon-color: var(--error-color) !important;\n  --bot-icon-url: url(../resources/alert-circle-outline.svg) !important;\n}\n\n.result-bot-icon-container {\n  width: 128px;\n  height: 128px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.result-bot-icon-container::before {\n  content: '';\n  display: block;\n  background-color: var(--bot-icon-color);\n  opacity: 0.08;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n  border-radius: 100%;\n  transition: 0.2s background-color;\n}\n\n.result-bot-icon {\n  width: 52px;\n  height: 52px;\n  mask-image: var(--bot-icon-url);\n  -webkit-mask-image: var(--bot-icon-url);\n  mask-size: 100%;\n  mask-repeat: no-repeat;\n  mask-position: center;\n  background-color: var(--bot-icon-color);\n  position: relative;\n  transition: 0.2s mask-image, 0.2s -webkit-mask-image, 0.2s background-color;\n}\n\n#result-text {\n  margin-top: 24px;\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--bot-icon-color);\n  transition: 0.2s color;\n}\n\n.logs-content {\n  background-color: #282c34;\n  color: #fff;\n  border-radius: 12px;\n  padding: 24px;\n  margin-top: 12px;\n  font-family: var(--font-family-consolas);\n}\n\n.logs-buttons-list {\n  display: flex;\n  margin-left: auto;\n}\n\n.logs-top-bar {\n  display: flex;\n  align-items: center;\n}\n\n.logs-section:not(:first-child) {\n  margin-top: 24px;\n}\n\n.logs-section-header {\n  color: var(--accent-color);\n  font-size: 14px;\n}\n\n.logs-section-content {\n  font-size: 12px;\n  margin-top: 1em;\n  white-space: pre-wrap;\n}\n\n#error-container {\n  margin-bottom: 96px;\n  padding: 24px;\n  border: 2px solid var(--error-color);\n  border-radius: 12px;\n  font-family: var(--font-family-consolas);\n  font-size: 14px;\n  line-height: 2;\n  display: none;\n}\n\n.error-container-visible {\n  display: block !important;\n}\n"],sourceRoot:""}]);const E=f},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var A=0;A<n.length;A++){var u=[].concat(n[A]);o&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),t&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=t):u[2]=t),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),e.push(u))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],A=o.base?s[0]+o.base:s[0],u=i[A]||0,l="".concat(A," ").concat(u);i[A]=u+1;var d=t(l),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var f=r(p,o);o.byIndex=c,e.splice(c,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=o(n,r),A=0;A<i.length;A++){var u=t(i[A]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=s}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},837:(n,e,t)=>{n.exports=t.p+"bf468b98f99fe3cb600c.svg"},790:(n,e,t)=>{n.exports=t.p+"cb3e629604702ef8bc66.svg"},373:(n,e,t)=>{n.exports=t.p+"550985caaa8859d4b95f.svg"},516:(n,e,t)=>{n.exports=t.p+"80392182d321c655d4d0.svg"},82:(n,e,t)=>{n.exports=t.p+"52d88d31d700c20dcc04.svg"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var o=e.getElementsByTagName("script");o.length&&(n=o[o.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t])},n(e,t)};function e(n,e,t,o){return new(t||(t=Promise))((function(r,i){function a(n){try{s(o.next(n))}catch(n){i(n)}}function c(n){try{s(o.throw(n))}catch(n){i(n)}}function s(n){var e;n.done?r(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((o=o.apply(n,e||[])).next())}))}function o(n,e){var t,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(a=0)),a;)try{if(t=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,o=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){a.label=c[1];break}if(6===c[0]&&a.label<r[1]){a.label=r[1],r=c;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(c);break}r[2]&&a.ops.pop(),a.trys.pop();continue}c=e.call(n,a)}catch(n){c=[6,n],o=0}finally{t=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function r(n,e,t){if(t||2===arguments.length)for(var o,r=0,i=e.length;r<i;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return n.concat(o||Array.prototype.slice.call(e))}Object.create,Object.create;const i={i8:"1.6.6"};var a="awesomium",c="cef",s="cefsharp",A="coachjs",u="electron",l="fminer",d="geb",p="nightmarejs",f="phantomas",g="phantomjs",v="rhino",m="selenium",h="sequentum",b="slimerjs",E="webdriverio",C="webdriver",w="headless_chrome",B="unknown",x=function(e){function t(n,o){var r=e.call(this,o)||this;return r.state=n,r.name="BotdError",Object.setPrototypeOf(r,t.prototype),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}(t,e),t}(Error);function y(n,e){return-1!==n.indexOf(e)}function k(n,e){return-1!==n.indexOf(e)}function _(n){return Object.getOwnPropertyNames(n)}function S(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];for(var o=function(e){if("string"==typeof e){if(y(n,e))return{value:!0}}else if(null!=function(n,e){if("find"in n)return n.find(e);for(var t=0;t<n.length;t++)if(e(n[t]))return n[t]}(n,(function(n){return e.test(n)})))return{value:!0}},r=0,i=e;r<i.length;r++){var a=o(i[r]);if("object"==typeof a)return a.value}return!1}function L(n){return n.reduce((function(n,e){return n+(e?1:0)}),0)}function W(){var n,e,t=window,o=navigator;return L(["webkitPersistentStorage"in o,"webkitTemporaryStorage"in o,0===o.vendor.indexOf("Google"),"webkitResolveLocalFileSystemURL"in t,"BatteryManager"in t,"webkitMediaStream"in t,"webkitSpeechGrammar"in t])>=5?"chromium":L(["ApplePayError"in t,"CSSPrimitiveValue"in t,"Counter"in t,0===o.vendor.indexOf("Apple"),"getStorageUpdates"in o,"WebKitMediaKeys"in t])>=4?"webkit":L(["buildID"in navigator,"MozAppearance"in(null!==(e=null===(n=document.documentElement)||void 0===n?void 0:n.style)&&void 0!==e?e:{}),"onmozfullscreenchange"in t,"mozInnerScreenX"in t,"CSSMozDocumentRule"in t,"CanvasCaptureMediaStream"in t])>=4?"gecko":"unknown"}function z(){var n,e=null===(n=navigator.userAgent)||void 0===n?void 0:n.toLowerCase();return k(e,"wechat")?"wechat":k(e,"firefox")?"firefox":k(e,"opera")||k(e,"opr")?"opera":k(e,"chrome")?"chrome":k(e,"safari")?"safari":k(e,"trident")||k(e,"msie")?"internet_explorer":"unknown"}function P(){var n=W(),e="chromium"===n,t="gecko"===n;if(!e&&!t)return!1;var o=window;return L(["onorientationchange"in o,"orientation"in o,e&&!("SharedWorker"in o),t&&/android/i.test(navigator.appVersion)])>=2}function j(){if(void 0===window.CSS)throw new x(-1,"window.CSS is undefined");return CSS.supports("-moz-appearance","auto")}function T(){return void 0!==document.hasFocus&&document.hasFocus()}var I={detectAppVersion:function(n){var e=n.appVersion;return 0===e.state&&(/headless/i.test(e.value)?w:/electron/i.test(e.value)?u:/slimerjs/i.test(e.value)?b:void 0)},detectDocumentAttributes:function(n){var e=n.documentElementKeys;return 0===e.state&&(S(e.value,"selenium","webdriver","driver")?m:void 0)},detectErrorTrace:function(n){var e=n.errorTrace;return 0===e.state&&(/PhantomJS/i.test(e.value)?g:void 0)},detectEvalLengthInconsistency:function(n){var e=n.evalLength;if(0===e.state){var t=e.value,o=z(),r=W();return"unknown"!=r&&(37===t&&!y(["webkit","gecko"],r)||39===t&&!y(["internet_explorer"],o)||33===t&&!y(["chromium"],r))}},detectFunctionBind:function(n){if(-2===n.functionBind.state)return g},detectLanguagesLengthInconsistency:function(n){var e=n.languages;if(0===e.state&&0===e.value.length)return w},detectNotificationPermissions:function(n){var e=n.notificationPermissions;return"chrome"===z()&&(0===e.state&&e.value?w:void 0)},detectPluginsArray:function(n){var e=n.pluginsArray;if(0===e.state&&!e.value)return w},detectPluginsLengthInconsistency:function(n){var e=n.pluginsLength;if(0===e.state){var t=z(),o=W();if("chrome"===t&&!P()&&"chromium"===o)return 0===e.value?w:void 0}},detectProcess:function(n){var e,t=n.process;return 0===t.state&&("renderer"===t.value.type||null!=(null===(e=t.value.versions)||void 0===e?void 0:e.electron)?u:void 0)},detectUserAgent:function(n){var e=n.userAgent;return 0===e.state&&(/PhantomJS/i.test(e.value)?g:/Headless/i.test(e.value)?w:/Electron/i.test(e.value)?u:/slimerjs/i.test(e.value)?b:void 0)},detectWebDriver:function(n){var e=n.webDriver;if(0===e.state&&e.value)return w},detectWebGL:function(n){var e=n.webGL;if(0===e.state){var t=e.value,o=t.vendor,r=t.renderer;if("Brian Paul"==o&&"Mesa OffScreen"==r)return w}},detectWindowExternal:function(n){var e=n.windowExternal;return 0===e.state&&(/Sequentum/i.test(e.value)?h:void 0)},detectWindowSize:function(n){var e=n.windowSize;if(0!==e.state)return!1;var t=e.value,o=t.outerWidth,r=t.outerHeight;return T()&&0===o&&0===r?w:void 0},detectMimeTypesConsistent:function(n){var e=n.mimeTypesConsistent;if(0===e.state&&!e.value)return B},detectProductSub:function(n){var e=n.productSub;if(0!==e.state)return!1;var t=z();return"chrome"!==t&&"safari"!==t&&"opera"!==t&&"wechat"!==t||"20030107"===e.value?void 0:B},detectDistinctiveProperties:function(n){var e=n.distinctiveProps;if(0!==e.state)return!1;var t,o=e.value;for(t in o)if(o[t])return t}},M={userAgent:function(){return navigator.userAgent},appVersion:function(){var n=navigator.appVersion;if(null==n)throw new x(-1,"navigator.appVersion is undefined");return n},rtt:function(){if(void 0===navigator.connection)throw new x(-1,"navigator.connection is undefined");if(void 0===navigator.connection.rtt)throw new x(-1,"navigator.connection.rtt is undefined");return navigator.connection.rtt},windowSize:function(){return{outerWidth:window.outerWidth,outerHeight:window.outerHeight,innerWidth:window.innerWidth,innerHeight:window.innerHeight}},pluginsLength:function(){if(void 0===navigator.plugins)throw new x(-1,"navigator.plugins is undefined");if(void 0===navigator.plugins.length)throw new x(-3,"navigator.plugins.length is undefined");return navigator.plugins.length},pluginsArray:function(){if(void 0===navigator.plugins)throw new x(-1,"navigator.plugins is undefined");if(void 0===window.PluginArray)throw new x(-1,"window.PluginArray is undefined");return navigator.plugins instanceof PluginArray},errorTrace:function(){try{null[0]()}catch(n){if(n instanceof Error&&null!=n.stack)return n.stack.toString()}throw new x(-3,"errorTrace signal unexpected behaviour")},productSub:function(){var n=navigator.productSub;if(void 0===n)throw new x(-1,"navigator.productSub is undefined");return n},windowExternal:function(){if(void 0===window.external)throw new x(-1,"window.external is undefined");var n=window.external;if("function"!=typeof n.toString)throw new x(-2,"window.external.toString is not a function");return n.toString()},mimeTypesConsistent:function(){if(void 0===navigator.mimeTypes)throw new x(-1,"navigator.mimeTypes is undefined");for(var n=navigator.mimeTypes,e=Object.getPrototypeOf(n)===MimeTypeArray.prototype,t=0;t<n.length;t++)e&&(e=Object.getPrototypeOf(n[t])===MimeType.prototype);return e},evalLength:function(){return eval.toString().length},webGL:function(){var n=document.createElement("canvas");if("function"!=typeof n.getContext)throw new x(-2,"HTMLCanvasElement.getContext is not a function");var e=n.getContext("webgl");if(null===e)throw new x(-4,"WebGLRenderingContext is null");if("function"!=typeof e.getParameter)throw new x(-2,"WebGLRenderingContext.getParameter is not a function");return{vendor:e.getParameter(e.VENDOR),renderer:e.getParameter(e.RENDERER)}},webDriver:function(){if(null==navigator.webdriver)throw new x(-1,"navigator.webdriver is undefined");return navigator.webdriver},languages:function(){var n,e=navigator,t=[],o=e.language||e.userLanguage||e.browserLanguage||e.systemLanguage;if(void 0!==o&&t.push([o]),Array.isArray(e.languages))"chromium"===W()&&L([!("MediaSettingsRange"in(n=window)),"RTCEncodedAudioFrame"in n,""+n.Intl=="[object Intl]",""+n.Reflect=="[object Reflect]"])>=3||t.push(e.languages);else if("string"==typeof e.languages){var r=e.languages;r&&t.push(r.split(","))}return t},notificationPermissions:function(){return e(this,void 0,void 0,(function(){var n,e;return o(this,(function(t){switch(t.label){case 0:if(void 0===window.Notification)throw new x(-1,"window.Notification is undefined");if(void 0===navigator.permissions)throw new x(-1,"navigator.permissions is undefined");if("function"!=typeof(n=navigator.permissions).query)throw new x(-2,"navigator.permissions.query is not a function");t.label=1;case 1:return t.trys.push([1,3,,4]),[4,n.query({name:"notifications"})];case 2:return e=t.sent(),[2,"denied"===window.Notification.permission&&"prompt"===e.state];case 3:throw t.sent(),new x(-3,"notificationPermissions signal unexpected behaviour");case 4:return[2]}}))}))},documentElementKeys:function(){if(void 0===document.documentElement)throw new x(-1,"document.documentElement is undefined");var n=document.documentElement;if("function"!=typeof n.getAttributeNames)throw new x(-2,"document.documentElement.getAttributeNames is not a function");return n.getAttributeNames()},functionBind:function(){if(void 0===Function.prototype.bind)throw new x(-2,"Function.prototype.bind is undefined");return Function.prototype.bind.toString()},process:function(){if(void 0===window.process)throw new x(-1,"window.process is undefined");return window.process},distinctiveProps:function(){var n,e,t=((n={})[a]={window:["awesomium"]},n[c]={window:["RunPerfTest"]},n[s]={window:["CefSharp"]},n[A]={window:["emit"]},n[l]={window:["fmget_targets"]},n[d]={window:["geb"]},n[p]={window:["__nightmare","nightmare"]},n[f]={window:["__phantomas"]},n[g]={window:["callPhantom","_phantom"]},n[v]={window:["spawn"]},n[m]={window:["_Selenium_IDE_Recorder","_selenium","calledSelenium",/^([a-z]){3}_.*_(Array|Promise|Symbol)$/],document:["__selenium_evaluate","selenium-evaluate","__selenium_unwrapped"]},n[E]={window:["wdioElectron"]},n[C]={window:["webdriver","__webdriverFunc","__lastWatirAlert","__lastWatirConfirm","__lastWatirPrompt","_WEBDRIVER_ELEM_CACHE","ChromeDriverw"],document:["__webdriver_script_fn","__driver_evaluate","__webdriver_evaluate","__fxdriver_evaluate","__driver_unwrapped","__webdriver_unwrapped","__fxdriver_unwrapped","__webdriver_script_fn","__webdriver_script_func","__webdriver_script_function","$cdc_asdjflasutopfhvcZLmcf","$cdc_asdjflasutopfhvcZLmcfl_","$chrome_asyncScriptInfo","__$webdriverAsyncExecutor"]},n[w]={window:["domAutomation","domAutomationController"]},n),o={},i=_(window),u=[];for(e in void 0!==window.document&&(u=_(window.document)),t){var h=t[e];if(void 0!==h){var b=void 0!==h.window&&S.apply(void 0,r([i],h.window,!1)),B=!(void 0===h.document||!u.length)&&S.apply(void 0,r([u],h.document,!1));o[e]=b||B}}return o}},D=function(){function n(){this.components=void 0,this.detections=void 0}return n.prototype.getComponents=function(){return this.components},n.prototype.getDetections=function(){return this.detections},n.prototype.getSources=function(){return M},n.prototype.getDetectors=function(){return I},n.prototype.detect=function(){if(void 0===this.components)throw new Error("BotDetector.detect can't be called before BotDetector.collect");var n=this.components,e=this.getDetectors(),t={},o={bot:!1};for(var r in e){var i=(0,e[r])(n),a={bot:!1};"string"==typeof i?a={bot:!0,botKind:i}:i&&(a={bot:!0,botKind:B}),t[r]=a,a.bot&&(o=a)}return this.detections=t,o},n.prototype.collect=function(){return e(this,void 0,void 0,(function(){var n,t,r,i=this;return o(this,(function(a){switch(a.label){case 0:return n=this.getSources(),t={},r=Object.keys(n),[4,Promise.all(r.map((function(r){return e(i,void 0,void 0,(function(){var e,i,a,c,s;return o(this,(function(o){switch(o.label){case 0:e=n[r],o.label=1;case 1:return o.trys.push([1,3,,4]),i=t,a=r,s={},[4,e()];case 2:return i[a]=(s.value=o.sent(),s.state=0,s),[3,4];case 3:return c=o.sent(),t[r]=c instanceof x?{state:c.state,error:"".concat(c.name,": ").concat(c.message)}:{state:-3,error:c instanceof Error?"".concat(c.name,": ").concat(c.message):String(c)},[3,4];case 4:return[2]}}))}))})))];case 1:return a.sent(),this.components=t,[2,this.components]}}))}))},n}();const R=D;function O(n){var t;return e(this,void 0,void 0,(function(){var e;return o(this,(function(o){switch(o.label){case 0:return(null===(t=null==n?void 0:n.monitoring)||void 0===t||t)&&function(){if(!(window.__fpjs_d_m||Math.random()>=.001))try{var n=new XMLHttpRequest;n.open("get","https://m1.openfpcdn.io/botd/v".concat(i.i8,"/npm-monitoring"),!0),n.send()}catch(n){console.error(n)}}(),[4,(e=new R).collect()];case 1:return o.sent(),[2,e]}}))}))}var Y=t(379),q=t.n(Y),N=t(795),F=t.n(N),Z=t(569),H=t.n(Z),X=t(565),U=t.n(X),G=t(216),K=t.n(G),J=t(589),V=t.n(J),$=t(800),Q={};Q.styleTagTransform=V(),Q.setAttributes=U(),Q.insert=H().bind(null,"head"),Q.domAPI=F(),Q.insertStyleElement=K(),q()($.Z,Q),$.Z&&$.Z.locals&&$.Z.locals;var nn=void 0,en=function(){return e(void 0,void 0,void 0,(function(){var n;return o(this,(function(t){switch(t.label){case 0:return[4,e(void 0,void 0,void 0,(function(){var n,e,t,r,i,a,c,s,A,u;return o(this,(function(o){switch(o.label){case 0:return o.trys.push([0,2,,3]),n=performance.now(),[4,O()];case 1:return e=o.sent(),t=performance.now()-n,r=e.detect(),i=performance.now()-n,a=null!==(A=e.getComponents())&&void 0!==A?A:{},c=null!==(u=e.getDetections())&&void 0!==u?u:{},s={browserEngineKind:W(),browserKind:z(),documentFocus:T(),mozAppearanceSupport:j(),isAndroid:P(),isDesktopWebKit:(l=window,d=l.HTMLElement,p=l.Document,L(["safari"in l,!("ongestureend"in l),!("TouchEvent"in l),!("orientation"in l),d&&!("autocapitalize"in d.prototype),p&&"pointerLockElement"in p.prototype])>=4)},[2,{isError:!1,collectionTime:t,detectionTime:i,detectionResult:r,detectedBot:(null==r?void 0:r.bot)?r.botKind:void 0,collectedData:a,detectorsResults:c,debugData:s}];case 2:return[2,{isError:!0,error:o.sent()}];case 3:return[2]}var l,d,p}))}))];case 1:return n=t.sent(),nn=n,function(n){var e=document.getElementById("result"),t=document.getElementById("result-text"),o=document.getElementById("collection-time"),r=document.getElementById("detection-time"),i=document.getElementById("detection-result"),a=document.getElementById("detectors"),c=document.getElementById("debug-data"),s=document.getElementById("collected-data"),A=document.getElementById("error-container"),u=document.getElementById("error-message");if(e.classList.remove("result-detected","result-error"),n.isError)return t.innerHTML="An error occured",e.classList.add("result-error"),A.classList.add("error-container-visible"),void(u.textContent=n.error.message);A.classList.remove("error-container-visible"),null!=n.detectedBot?(t.innerHTML="".concat(n.detectedBot," detected."),e.classList.add("result-detected")):t.innerHTML="You are not a bot.",o.textContent="".concat(n.collectionTime.toFixed(2),"ms"),r.textContent="".concat(n.detectionTime.toFixed(2),"ms"),i.textContent=JSON.stringify(n.detectionResult,null,4),a.textContent=JSON.stringify(n.detectorsResults,null,4),c.textContent=JSON.stringify(n.debugData,null,4),s.textContent=JSON.stringify(n.collectedData,null,4)}(n),[2]}}))}))};window.onload=function(){var n=document.getElementById("detect-button"),e=document.getElementById("copy-logs-button");n.addEventListener("click",(function(){en()})),e.addEventListener("click",(function(){navigator.clipboard.writeText(JSON.stringify(nn)).then((function(){alert("BotD logs copied to clipboard")}))})),en()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N0JQLEVBQWlCUyxZQUFjLEdBQUczWCxPQUFPdUMsRUFBT3lULGVBQWU0QixRQUFRLEdBQUksTUFDM0VULEVBQWdCUSxZQUFjLEdBQUczWCxPQUFPdUMsRUFBTzJULGNBQWMwQixRQUFRLEdBQUksTUFDekVSLEVBQWtCTyxZQUFjL1YsS0FBS0MsVUFBVVUsRUFBTzBULGdCQUFpQixLQUFNLEdBQzdFb0IsRUFBWU0sWUFBYy9WLEtBQUtDLFVBQVVVLEVBQU91VSxpQkFBa0IsS0FBTSxHQUN4RVgsRUFBVXdCLFlBQWMvVixLQUFLQyxVQUFVVSxFQUFPNFQsVUFBVyxLQUFNLEdBQy9EVSxFQUFjYyxZQUFjL1YsS0FBS0MsVUFBVVUsRUFBT3NVLGNBQWUsS0FBTSxFQUMzRSxDQVNnQmdCLENBQXNCdFYsR0FDZixDQUFDLEdBRXBCLEdBQ0osR0FBSSxFQUNKaUMsT0FBT3NULE9BQVMsV0FDWixJQUFJQyxFQUFpQnpULFNBQVMwUyxlQUFlLGlCQUN6Q2dCLEVBQWlCMVQsU0FBUzBTLGVBQWUsb0JBQzdDZSxFQUFlRSxpQkFBaUIsU0FBUyxXQUNyQ3BDLElBQ0osSUFDQW1DLEVBQWVDLGlCQUFpQixTQUFTLFdBQ3JDOUssVUFBVStLLFVBQVVDLFVBQVV2VyxLQUFLQyxVQUFVK1QsS0FBVXBNLE1BQUssV0FDeEQ0TyxNQUFNLGdDQUNWLEdBQ0osSUFDQXZDLElBQ0osQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9wbGF5Z3JvdW5kL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy90eXBlcy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3V0aWxzL3BvbnlmaWxscy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3V0aWxzL21pc2MudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy91dGlscy9icm93c2VyLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL2luZGV4LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL2FwcF92ZXJzaW9uLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL2RvY3VtZW50X2VsZW1lbnRfa2V5cy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9lcnJvcl90cmFjZS50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9ldmFsX2xlbmd0aC50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9mdW5jdGlvbl9iaW5kLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL2xhbmd1YWdlc19pbmNvbnNpc3RlbmN5LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL25vdGlmaWNhdGlvbl9wZXJtaXNzaW9ucy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9wbHVnaW5zX2FycmF5LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL3BsdWdpbnNfaW5jb25zaXN0ZW5jeS50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9wcm9jZXNzLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL3VzZXJfYWdlbnQudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9kZXRlY3RvcnMvd2ViZHJpdmVyLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL3dlYmdsLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL3dpbmRvd19leHRlcm5hbC50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy93aW5kb3dfc2l6ZS50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9ycy9taW1lX3R5cGVzX2NvbnNpc3RlbmNlLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL3Byb2R1Y3Rfc3ViLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvZGV0ZWN0b3JzL2Rpc3RpbmN0aXZlX3Byb3BlcnRpZXMudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9zb3VyY2VzL2luZGV4LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy91c2VyX2FnZW50LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy9hcHBfdmVyc2lvbi50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvcnR0LnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy93aW5kb3dfc2l6ZS50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvcGx1Z2luc19sZW5ndGgudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9zb3VyY2VzL3BsdWdpbnNfYXJyYXkudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9zb3VyY2VzL2Vycm9yX3RyYWNlLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy9wcm9kdWN0X3N1Yi50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvd2luZG93X2V4dGVybmFsLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy9taW1lX3R5cGVzX2NvbnNpc3RlbmNlLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy9ldmFsX2xlbmd0aC50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvd2ViZ2wudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9zb3VyY2VzL3dlYmRyaXZlci50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvbGFuZ3VhZ2VzLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvc291cmNlcy9ub3RpZmljYXRpb25fcGVybWlzc2lvbnMudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3NyYy9zb3VyY2VzL2RvY3VtZW50X2VsZW1lbnRfa2V5cy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvZnVuY3Rpb25fYmluZC50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvcHJvY2Vzcy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL3NvdXJjZXMvZGlzdGluY3RpdmVfcHJvcGVydGllcy50cyIsIndlYnBhY2s6Ly9AZmluZ2VycHJpbnRqcy9ib3RkLy4vc3JjL2RldGVjdG9yLnRzIiwid2VicGFjazovL0BmaW5nZXJwcmludGpzL2JvdGQvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3BsYXlncm91bmQvc3R5bGUuY3NzP2RhNjIiLCJ3ZWJwYWNrOi8vQGZpbmdlcnByaW50anMvYm90ZC8uL3BsYXlncm91bmQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL3Jlc291cmNlcy9jaGV2cm9uX3JpZ2h0LnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4uL3Jlc291cmNlcy9naXRodWJfaWNvbi5zdmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyA9IG5ldyBVUkwoXCIuLi9yZXNvdXJjZXMvcm9ib3Qtb2ZmLW91dGxpbmUuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gPSBuZXcgVVJMKFwiLi4vcmVzb3VyY2VzL3JvYm90LW91dGxpbmUuc3ZnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18gPSBuZXcgVVJMKFwiLi4vcmVzb3VyY2VzL2FsZXJ0LWNpcmNsZS1vdXRsaW5lLnN2Z1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8zX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAtLWFjY2VudC1jb2xvcjogcmdiKDI0MCwgNjgsIDUpO1xcbiAgLS1hY2NlbnQtZGFyay1jb2xvcjogcmdiKDE0MCwgMzksIDMpO1xcbiAgLS1lcnJvci1jb2xvcjogI2IzMjYxZTtcXG4gIC0tZm9udC1mYW1pbHk6ICdGaXJhIE1vbm8nLCBtb25vc3BhY2U7XFxuICAtLWZvbnQtZmFtaWx5LWNvbnNvbGFzOiBDb25zb2xhcywgJ0xpYmVyYXRpb24gTW9ubycsIE1lbmxvLCBDb3VyaWVyLCBtb25vc3BhY2U7XFxufVxcblxcbmJvZHkge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBtYXJnaW46IDBweDtcXG4gIHBhZGRpbmc6IDBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjc7XFxuICBjb2xvcjogIzAwMDtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWZhbWlseTogdmFyKC0tZm9udC1mYW1pbHkpO1xcbiAgcGFkZGluZy1ib3R0b206IDI0cHg7XFxufVxcblxcbioge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICB3aWR0aDogY2FsYygxMDAlIC0gMTI4cHgpO1xcbiAgbWF4LXdpZHRoOiAxNTM2cHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuLm1lZGl1bS1jb250YWluZXIge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDMycHgpO1xcbiAgbWF4LXdpZHRoOiA5NjBweDtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG4jbmF2YmFyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA5NnB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuI25hdmJhciBhIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4jbmF2YmFyIC5jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBoZWlnaHQ6IDEwMCU7XFxufVxcblxcbiNuYXZiYXItY2hldnJvbiB7XFxuICB3aWR0aDogMjRweDtcXG4gIGhlaWdodDogMjRweDtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgb3BhY2l0eTogMC4yO1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXFxuI25hdmJhciAubG9nby1yZWYge1xcbiAgd2lkdGg6IG1heC1jb250ZW50O1xcbn1cXG5cXG4jbmF2YmFyIC5sb2dvIHtcXG4gIHdpZHRoOiAxOTZweDtcXG4gIG1hcmdpbi10b3A6IDJweDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgI25hdmJhciB7XFxuICAgIGhlaWdodDogYXV0bztcXG4gIH1cXG5cXG4gICNuYXZiYXIgLmNvbnRhaW5lciB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuXFxuICAjbmF2YmFyIC5sb2dvLXJlZiB7XFxuICAgIG1hcmdpbi10b3A6IDMycHg7XFxuICB9XFxuXFxuICAjbmF2YmFyIC5sb2dvIHtcXG4gICAgbWFyZ2luLXRvcDogMDtcXG4gICAgd2lkdGg6IDI1NnB4O1xcbiAgfVxcblxcbiAgI25hdmJhciAjbmF2YmFyLWNoZXZyb24ge1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxuICB9XFxuXFxuICAjbmF2YmFyICNwbGF5Z3JvdW5kLWFjdGlvbnMge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gICAgbWFyZ2luOiAzMnB4IDBweDtcXG4gIH1cXG59XFxuXFxuaDEsXFxuaDIge1xcbiAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gIGNvbG9yOiAjMGQxMDJiO1xcbn1cXG5oMSB7XFxuICBmb250LXNpemU6IDI0cHg7XFxufVxcbmgyIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG59XFxuXFxuLmNvbnRlbnQge1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSA2NHB4KTtcXG4gIG1heC13aWR0aDogOTYwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbn1cXG5cXG4uZ2l0aHViLWNhcmQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHBhZGRpbmc6IDhweDtcXG59XFxuXFxuLmdpdGh1Yi1jYXJkOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNik7XFxuICB0cmFuc2l0aW9uOiAwLjE1cztcXG59XFxuXFxuLmdpdGh1Yi1jYXJkOmFjdGl2ZSxcXG4uZ2l0aHViLWNhcmQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEyKTtcXG4gIHRyYW5zaXRpb246IDAuMTVzO1xcbn1cXG5cXG4uZ2l0aHViLWNhcmQ6OmJlZm9yZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgd2lkdGg6IDMycHg7XFxuICBoZWlnaHQ6IDMycHg7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1zaXplOiAyNHB4O1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbn1cXG5cXG4jcGxheWdyb3VuZC1hY3Rpb25zIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgY29sdW1uLWdhcDogMTZweDtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIHdpZHRoOiBmaXQtY29udGVudDtcXG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICBwYWRkaW5nOiAxMnB4IDIwcHg7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgbWFyZ2luOiBub25lO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTtcXG4gIHRyYW5zaXRpb246IDAuMTVzIGJhY2tncm91bmQtY29sb3I7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4ub3JhbmdlLWJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXI6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLm9yYW5nZS1idXR0b24tb3V0bGluZWQge1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYWNjZW50LWNvbG9yKTtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5vcmFuZ2UtYnV0dG9uOmhvdmVyLFxcbi5vcmFuZ2UtYnV0dG9uOmFjdGl2ZSxcXG4ub3JhbmdlLWJ1dHRvbjpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtZGFyay1jb2xvcik7XFxufVxcblxcbi5vcmFuZ2UtYnV0dG9uLW91dGxpbmVkOmhvdmVyLFxcbi5vcmFuZ2UtYnV0dG9uLW91dGxpbmVkOmFjdGl2ZSxcXG4ub3JhbmdlLWJ1dHRvbi1vdXRsaW5lZDpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MCwgNjgsIDUsIDAuMTIpO1xcbn1cXG5cXG4uY29udGVudC1jYXJkIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcblxcbi5jb250ZW50LWNhcmQtaGVhZGVyIHtcXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBwYWRkaW5nOiB2YXIoLS1jb250ZW50LWNhcmQtcGFkZGluZyk7XFxufVxcblxcbiNyZXN1bHQge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIG1hcmdpbjogOTZweCBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLS1ib3QtaWNvbi1jb2xvcjogIzRjYWY1MDtcXG4gIC0tYm90LWljb24tdXJsOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpO1xcbn1cXG5cXG4ucmVzdWx0LWRldGVjdGVkIHtcXG4gIC0tYm90LWljb24tY29sb3I6ICNmNDQzMzYgIWltcG9ydGFudDtcXG4gIC0tYm90LWljb24tdXJsOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yZXN1bHQtZXJyb3Ige1xcbiAgLS1ib3QtaWNvbi1jb2xvcjogdmFyKC0tZXJyb3ItY29sb3IpICFpbXBvcnRhbnQ7XFxuICAtLWJvdC1pY29uLXVybDogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucmVzdWx0LWJvdC1pY29uLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTI4cHg7XFxuICBoZWlnaHQ6IDEyOHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLnJlc3VsdC1ib3QtaWNvbi1jb250YWluZXI6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgb3BhY2l0eTogMC4wODtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IC0xO1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIHRyYW5zaXRpb246IDAuMnMgYmFja2dyb3VuZC1jb2xvcjtcXG59XFxuXFxuLnJlc3VsdC1ib3QtaWNvbiB7XFxuICB3aWR0aDogNTJweDtcXG4gIGhlaWdodDogNTJweDtcXG4gIG1hc2staW1hZ2U6IHZhcigtLWJvdC1pY29uLXVybCk7XFxuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWJvdC1pY29uLXVybCk7XFxuICBtYXNrLXNpemU6IDEwMCU7XFxuICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgbWFzay1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNpdGlvbjogMC4ycyBtYXNrLWltYWdlLCAwLjJzIC13ZWJraXQtbWFzay1pbWFnZSwgMC4ycyBiYWNrZ3JvdW5kLWNvbG9yO1xcbn1cXG5cXG4jcmVzdWx0LXRleHQge1xcbiAgbWFyZ2luLXRvcDogMjRweDtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgdHJhbnNpdGlvbjogMC4ycyBjb2xvcjtcXG59XFxuXFxuLmxvZ3MtY29udGVudCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyYzM0O1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgcGFkZGluZzogMjRweDtcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxuICBmb250LWZhbWlseTogdmFyKC0tZm9udC1mYW1pbHktY29uc29sYXMpO1xcbn1cXG5cXG4ubG9ncy1idXR0b25zLWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cXG4ubG9ncy10b3AtYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubG9ncy1zZWN0aW9uOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5sb2dzLXNlY3Rpb24taGVhZGVyIHtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4ubG9ncy1zZWN0aW9uLWNvbnRlbnQge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbn1cXG5cXG4jZXJyb3ItY29udGFpbmVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDk2cHg7XFxuICBwYWRkaW5nOiAyNHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tZXJyb3ItY29sb3IpO1xcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1jb25zb2xhcyk7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5lcnJvci1jb250YWluZXItdmlzaWJsZSB7XFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9wbGF5Z3JvdW5kL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLCtCQUErQjtFQUMvQixvQ0FBb0M7RUFDcEMsc0JBQXNCO0VBQ3RCLHFDQUFxQztFQUNyQyw4RUFBOEU7QUFDaEY7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixXQUFXO0VBQ1gsWUFBWTtFQUNaLHlCQUF5QjtFQUN6QixXQUFXO0VBQ1gsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLCtCQUErQjtFQUMvQixvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSx5QkFBeUI7RUFDekIsaUJBQWlCO0VBQ2pCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsZ0JBQWdCO0VBQ2hCLGNBQWM7QUFDaEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHFCQUFxQjtFQUNyQixjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLDRCQUE0QjtFQUM1QiwyQkFBMkI7RUFDM0Is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QUFFQTtFQUNFLGFBQWE7RUFDYixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsMEJBQTBCO0VBQzFCLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsZUFBZTtFQUNmLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLG1CQUFtQjtFQUNuQixhQUFhO0VBQ2Isb0NBQW9DO0VBQ3BDLG1CQUFtQjtFQUNuQix3Q0FBd0M7RUFDeEMsZUFBZTtFQUNmLGNBQWM7RUFDZCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgLS1hY2NlbnQtY29sb3I6IHJnYigyNDAsIDY4LCA1KTtcXG4gIC0tYWNjZW50LWRhcmstY29sb3I6IHJnYigxNDAsIDM5LCAzKTtcXG4gIC0tZXJyb3ItY29sb3I6ICNiMzI2MWU7XFxuICAtLWZvbnQtZmFtaWx5OiAnRmlyYSBNb25vJywgbW9ub3NwYWNlO1xcbiAgLS1mb250LWZhbWlseS1jb25zb2xhczogQ29uc29sYXMsICdMaWJlcmF0aW9uIE1vbm8nLCBNZW5sbywgQ291cmllciwgbW9ub3NwYWNlO1xcbn1cXG5cXG5ib2R5IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgbWFyZ2luOiAwcHg7XFxuICBwYWRkaW5nOiAwcHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmY3O1xcbiAgY29sb3I6ICMwMDA7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtZmFtaWx5KTtcXG4gIHBhZGRpbmctYm90dG9tOiAyNHB4O1xcbn1cXG5cXG4qIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5jb250YWluZXIge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDEyOHB4KTtcXG4gIG1heC13aWR0aDogMTUzNnB4O1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbi5tZWRpdW0tY29udGFpbmVyIHtcXG4gIHdpZHRoOiBjYWxjKDEwMCUgLSAzMnB4KTtcXG4gIG1heC13aWR0aDogOTYwcHg7XFxuICBtYXJnaW46IDAgYXV0bztcXG59XFxuXFxuI25hdmJhciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogOTZweDtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxufVxcblxcbiNuYXZiYXIgYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuI25hdmJhciAuY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4jbmF2YmFyLWNoZXZyb24ge1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKC4uL3Jlc291cmNlcy9jaGV2cm9uX3JpZ2h0LnN2Zyk7XFxuICBvcGFjaXR5OiAwLjI7XFxuICBtYXJnaW4tbGVmdDogOHB4O1xcbn1cXG5cXG4jbmF2YmFyIC5sb2dvLXJlZiB7XFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XFxufVxcblxcbiNuYXZiYXIgLmxvZ28ge1xcbiAgd2lkdGg6IDE5NnB4O1xcbiAgbWFyZ2luLXRvcDogMnB4O1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcwMHB4KSB7XFxuICAjbmF2YmFyIHtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgfVxcblxcbiAgI25hdmJhciAuY29udGFpbmVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIH1cXG5cXG4gICNuYXZiYXIgLmxvZ28tcmVmIHtcXG4gICAgbWFyZ2luLXRvcDogMzJweDtcXG4gIH1cXG5cXG4gICNuYXZiYXIgLmxvZ28ge1xcbiAgICBtYXJnaW4tdG9wOiAwO1xcbiAgICB3aWR0aDogMjU2cHg7XFxuICB9XFxuXFxuICAjbmF2YmFyICNuYXZiYXItY2hldnJvbiB7XFxuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG4gIH1cXG5cXG4gICNuYXZiYXIgI3BsYXlncm91bmQtYWN0aW9ucyB7XFxuICAgIG1hcmdpbi1sZWZ0OiAwO1xcbiAgICBtYXJnaW46IDMycHggMHB4O1xcbiAgfVxcbn1cXG5cXG5oMSxcXG5oMiB7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgY29sb3I6ICMwZDEwMmI7XFxufVxcbmgxIHtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG59XFxuaDIge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbn1cXG5cXG4uY29udGVudCB7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDY0cHgpO1xcbiAgbWF4LXdpZHRoOiA5NjBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgbWFyZ2luOiAwIGF1dG87XFxufVxcblxcbi5naXRodWItY2FyZCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cXG4uZ2l0aHViLWNhcmQ6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjA2KTtcXG4gIHRyYW5zaXRpb246IDAuMTVzO1xcbn1cXG5cXG4uZ2l0aHViLWNhcmQ6YWN0aXZlLFxcbi5naXRodWItY2FyZDpmb2N1cyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMTIpO1xcbiAgdHJhbnNpdGlvbjogMC4xNXM7XFxufVxcblxcbi5naXRodWItY2FyZDo6YmVmb3JlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgY29udGVudDogJyc7XFxuICB3aWR0aDogMzJweDtcXG4gIGhlaWdodDogMzJweDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCguLi9yZXNvdXJjZXMvZ2l0aHViX2ljb24uc3ZnKTtcXG4gIGJhY2tncm91bmQtc2l6ZTogMjRweDtcXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICBtYXJnaW4tcmlnaHQ6IDRweDtcXG59XFxuXFxuI3BsYXlncm91bmQtYWN0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGNvbHVtbi1nYXA6IDE2cHg7XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG59XFxuXFxuLmJ1dHRvbiB7XFxuICB3aWR0aDogZml0LWNvbnRlbnQ7XFxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcbiAgcGFkZGluZzogMTJweCAyMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIG1hcmdpbjogbm9uZTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7XFxuICB0cmFuc2l0aW9uOiAwLjE1cyBiYWNrZ3JvdW5kLWNvbG9yO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuLm9yYW5nZS1idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yKTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgYm9yZGVyOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5vcmFuZ2UtYnV0dG9uLW91dGxpbmVkIHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWFjY2VudC1jb2xvcik7XFxuICBjb2xvcjogdmFyKC0tYWNjZW50LWNvbG9yKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ub3JhbmdlLWJ1dHRvbjpob3ZlcixcXG4ub3JhbmdlLWJ1dHRvbjphY3RpdmUsXFxuLm9yYW5nZS1idXR0b246Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYWNjZW50LWRhcmstY29sb3IpO1xcbn1cXG5cXG4ub3JhbmdlLWJ1dHRvbi1vdXRsaW5lZDpob3ZlcixcXG4ub3JhbmdlLWJ1dHRvbi1vdXRsaW5lZDphY3RpdmUsXFxuLm9yYW5nZS1idXR0b24tb3V0bGluZWQ6Zm9jdXMge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDAsIDY4LCA1LCAwLjEyKTtcXG59XFxuXFxuLmNvbnRlbnQtY2FyZCB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG5cXG4uY29udGVudC1jYXJkLWhlYWRlciB7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgcGFkZGluZzogdmFyKC0tY29udGVudC1jYXJkLXBhZGRpbmcpO1xcbn1cXG5cXG4jcmVzdWx0IHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBtYXJnaW46IDk2cHggYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC0tYm90LWljb24tY29sb3I6ICM0Y2FmNTA7XFxuICAtLWJvdC1pY29uLXVybDogdXJsKC4uL3Jlc291cmNlcy9yb2JvdC1vZmYtb3V0bGluZS5zdmcpO1xcbn1cXG5cXG4ucmVzdWx0LWRldGVjdGVkIHtcXG4gIC0tYm90LWljb24tY29sb3I6ICNmNDQzMzYgIWltcG9ydGFudDtcXG4gIC0tYm90LWljb24tdXJsOiB1cmwoLi4vcmVzb3VyY2VzL3JvYm90LW91dGxpbmUuc3ZnKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucmVzdWx0LWVycm9yIHtcXG4gIC0tYm90LWljb24tY29sb3I6IHZhcigtLWVycm9yLWNvbG9yKSAhaW1wb3J0YW50O1xcbiAgLS1ib3QtaWNvbi11cmw6IHVybCguLi9yZXNvdXJjZXMvYWxlcnQtY2lyY2xlLW91dGxpbmUuc3ZnKSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ucmVzdWx0LWJvdC1pY29uLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTI4cHg7XFxuICBoZWlnaHQ6IDEyOHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG59XFxuXFxuLnJlc3VsdC1ib3QtaWNvbi1jb250YWluZXI6OmJlZm9yZSB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgb3BhY2l0eTogMC4wODtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHotaW5kZXg6IC0xO1xcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG4gIHRyYW5zaXRpb246IDAuMnMgYmFja2dyb3VuZC1jb2xvcjtcXG59XFxuXFxuLnJlc3VsdC1ib3QtaWNvbiB7XFxuICB3aWR0aDogNTJweDtcXG4gIGhlaWdodDogNTJweDtcXG4gIG1hc2staW1hZ2U6IHZhcigtLWJvdC1pY29uLXVybCk7XFxuICAtd2Via2l0LW1hc2staW1hZ2U6IHZhcigtLWJvdC1pY29uLXVybCk7XFxuICBtYXNrLXNpemU6IDEwMCU7XFxuICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xcbiAgbWFzay1wb3NpdGlvbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNpdGlvbjogMC4ycyBtYXNrLWltYWdlLCAwLjJzIC13ZWJraXQtbWFzay1pbWFnZSwgMC4ycyBiYWNrZ3JvdW5kLWNvbG9yO1xcbn1cXG5cXG4jcmVzdWx0LXRleHQge1xcbiAgbWFyZ2luLXRvcDogMjRweDtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBjb2xvcjogdmFyKC0tYm90LWljb24tY29sb3IpO1xcbiAgdHJhbnNpdGlvbjogMC4ycyBjb2xvcjtcXG59XFxuXFxuLmxvZ3MtY29udGVudCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjgyYzM0O1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiAxMnB4O1xcbiAgcGFkZGluZzogMjRweDtcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxuICBmb250LWZhbWlseTogdmFyKC0tZm9udC1mYW1pbHktY29uc29sYXMpO1xcbn1cXG5cXG4ubG9ncy1idXR0b25zLWxpc3Qge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbn1cXG5cXG4ubG9ncy10b3AtYmFyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubG9ncy1zZWN0aW9uOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi10b3A6IDI0cHg7XFxufVxcblxcbi5sb2dzLXNlY3Rpb24taGVhZGVyIHtcXG4gIGNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4ubG9ncy1zZWN0aW9uLWNvbnRlbnQge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgbWFyZ2luLXRvcDogMWVtO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbn1cXG5cXG4jZXJyb3ItY29udGFpbmVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDk2cHg7XFxuICBwYWRkaW5nOiAyNHB4O1xcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tZXJyb3ItY29sb3IpO1xcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseS1jb25zb2xhcyk7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMjtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5lcnJvci1jb250YWluZXItdmlzaWJsZSB7XFxuICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xyXG4gICAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XHJcbiAgICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xyXG4gICAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XHJcbiAgICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcclxuICAgIHZhciBfLCBkb25lID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XHJcbiAgICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMucHVzaChfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy5wdXNoKF8pO1xyXG4gICAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gICAgZG9uZSA9IHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xyXG4gICAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XHJcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcbiIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuLyoqXG4gKiBFbnVtIGZvciB0eXBlcyBvZiBib3RzLlxuICogU3BlY2lmaWMgdHlwZXMgb2YgYm90cyBjb21lIGZpcnN0LCBmb2xsb3dlZCBieSBhdXRvbWF0aW9uIHRlY2hub2xvZ2llcy5cbiAqXG4gKiBAcmVhZG9ubHlcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCB2YXIgQm90S2luZCA9IHtcbiAgICAvLyBPYmplY3QgaXMgdXNlZCBpbnN0ZWFkIG9mIFR5cGVzY3JpcHQgZW51bSB0byBhdm9pZCBlbWl0dGluZyBJSUZFIHdoaWNoIG1pZ2h0IGJlIGFmZmVjdGVkIGJ5IGZ1cnRoZXIgdHJlZS1zaGFraW5nLlxuICAgIC8vIFNlZSBleGFtcGxlIG9mIGNvbXBpbGVkIGVudW1zIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS80NzM2Mzk5NilcbiAgICBBd2Vzb21pdW06ICdhd2Vzb21pdW0nLFxuICAgIENlZjogJ2NlZicsXG4gICAgQ2VmU2hhcnA6ICdjZWZzaGFycCcsXG4gICAgQ29hY2hKUzogJ2NvYWNoanMnLFxuICAgIEVsZWN0cm9uOiAnZWxlY3Ryb24nLFxuICAgIEZNaW5lcjogJ2ZtaW5lcicsXG4gICAgR2ViOiAnZ2ViJyxcbiAgICBOaWdodG1hcmVKUzogJ25pZ2h0bWFyZWpzJyxcbiAgICBQaGFudG9tYXM6ICdwaGFudG9tYXMnLFxuICAgIFBoYW50b21KUzogJ3BoYW50b21qcycsXG4gICAgUmhpbm86ICdyaGlubycsXG4gICAgU2VsZW5pdW06ICdzZWxlbml1bScsXG4gICAgU2VxdWVudHVtOiAnc2VxdWVudHVtJyxcbiAgICBTbGltZXJKUzogJ3NsaW1lcmpzJyxcbiAgICBXZWJEcml2ZXJJTzogJ3dlYmRyaXZlcmlvJyxcbiAgICBXZWJEcml2ZXI6ICd3ZWJkcml2ZXInLFxuICAgIEhlYWRsZXNzQ2hyb21lOiAnaGVhZGxlc3NfY2hyb21lJyxcbiAgICBVbmtub3duOiAndW5rbm93bicsXG59O1xuLyoqXG4gKiBCb3QgZGV0ZWN0aW9uIGVycm9yLlxuICovXG52YXIgQm90ZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCb3RkRXJyb3IsIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBCb3RkRXJyb3IuXG4gICAgICpcbiAgICAgKiBAY2xhc3NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBCb3RkRXJyb3Ioc3RhdGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgX3RoaXMubmFtZSA9ICdCb3RkRXJyb3InO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIEJvdGRFcnJvci5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBCb3RkRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBCb3RkRXJyb3IgfTtcbiIsImV4cG9ydCBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFyciwgdmFsdWUpIHtcbiAgICByZXR1cm4gYXJyLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJJbmNsdWRlcyhzdHIsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0ci5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gYXJyYXlGaW5kKGFycmF5LCBjYWxsYmFjaykge1xuICAgIGlmICgnZmluZCcgaW4gYXJyYXkpXG4gICAgICAgIHJldHVybiBhcnJheS5maW5kKGNhbGxiYWNrKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayhhcnJheVtpXSwgaSwgYXJyYXkpKVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5W2ldO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIiwiaW1wb3J0IHsgYXJyYXlGaW5kLCBhcnJheUluY2x1ZGVzIH0gZnJvbSAnLi9wb255ZmlsbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9iamVjdFByb3BzKG9iaikge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVzKGFycikge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAga2V5c1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKGFycmF5SW5jbHVkZXMoYXJyLCBrZXkpKVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBhcnJheUZpbmQoYXJyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGtleS50ZXN0KHZhbHVlKTsgfSk7XG4gICAgICAgICAgICBpZiAobWF0Y2ggIT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBfYSA9IDAsIGtleXNfMSA9IGtleXM7IF9hIDwga2V5c18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c18xW19hXTtcbiAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKGtleSk7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gY291bnRUcnV0aHkodmFsdWVzKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKHN1bSwgdmFsdWUpIHsgcmV0dXJuIHN1bSArICh2YWx1ZSA/IDEgOiAwKTsgfSwgMCk7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBjb3VudFRydXRoeSB9IGZyb20gJy4vbWlzYyc7XG5pbXBvcnQgeyBzdHJJbmNsdWRlcyB9IGZyb20gJy4vcG9ueWZpbGxzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRCcm93c2VyRW5naW5lS2luZCgpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIC8vIEJhc2VkIG9uIHJlc2VhcmNoIGluIE9jdG9iZXIgMjAyMC4gVGVzdGVkIHRvIGRldGVjdCBDaHJvbWl1bSA0Mi04Ni5cbiAgICB2YXIgdyA9IHdpbmRvdztcbiAgICB2YXIgbiA9IG5hdmlnYXRvcjtcbiAgICBpZiAoY291bnRUcnV0aHkoW1xuICAgICAgICAnd2Via2l0UGVyc2lzdGVudFN0b3JhZ2UnIGluIG4sXG4gICAgICAgICd3ZWJraXRUZW1wb3JhcnlTdG9yYWdlJyBpbiBuLFxuICAgICAgICBuLnZlbmRvci5pbmRleE9mKCdHb29nbGUnKSA9PT0gMCxcbiAgICAgICAgJ3dlYmtpdFJlc29sdmVMb2NhbEZpbGVTeXN0ZW1VUkwnIGluIHcsXG4gICAgICAgICdCYXR0ZXJ5TWFuYWdlcicgaW4gdyxcbiAgICAgICAgJ3dlYmtpdE1lZGlhU3RyZWFtJyBpbiB3LFxuICAgICAgICAnd2Via2l0U3BlZWNoR3JhbW1hcicgaW4gdyxcbiAgICBdKSA+PSA1KSB7XG4gICAgICAgIHJldHVybiBcImNocm9taXVtXCIgLyogQnJvd3NlckVuZ2luZUtpbmQuQ2hyb21pdW0gKi87XG4gICAgfVxuICAgIGlmIChjb3VudFRydXRoeShbXG4gICAgICAgICdBcHBsZVBheUVycm9yJyBpbiB3LFxuICAgICAgICAnQ1NTUHJpbWl0aXZlVmFsdWUnIGluIHcsXG4gICAgICAgICdDb3VudGVyJyBpbiB3LFxuICAgICAgICBuLnZlbmRvci5pbmRleE9mKCdBcHBsZScpID09PSAwLFxuICAgICAgICAnZ2V0U3RvcmFnZVVwZGF0ZXMnIGluIG4sXG4gICAgICAgICdXZWJLaXRNZWRpYUtleXMnIGluIHcsXG4gICAgXSkgPj0gNCkge1xuICAgICAgICByZXR1cm4gXCJ3ZWJraXRcIiAvKiBCcm93c2VyRW5naW5lS2luZC5XZWJraXQgKi87XG4gICAgfVxuICAgIGlmIChjb3VudFRydXRoeShbXG4gICAgICAgICdidWlsZElEJyBpbiBuYXZpZ2F0b3IsXG4gICAgICAgICdNb3pBcHBlYXJhbmNlJyBpbiAoKF9iID0gKF9hID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3R5bGUpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9KSxcbiAgICAgICAgJ29ubW96ZnVsbHNjcmVlbmNoYW5nZScgaW4gdyxcbiAgICAgICAgJ21veklubmVyU2NyZWVuWCcgaW4gdyxcbiAgICAgICAgJ0NTU01vekRvY3VtZW50UnVsZScgaW4gdyxcbiAgICAgICAgJ0NhbnZhc0NhcHR1cmVNZWRpYVN0cmVhbScgaW4gdyxcbiAgICBdKSA+PSA0KSB7XG4gICAgICAgIHJldHVybiBcImdlY2tvXCIgLyogQnJvd3NlckVuZ2luZUtpbmQuR2Vja28gKi87XG4gICAgfVxuICAgIHJldHVybiBcInVua25vd25cIiAvKiBCcm93c2VyRW5naW5lS2luZC5Vbmtub3duICovO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEJyb3dzZXJLaW5kKCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgdXNlckFnZW50ID0gKF9hID0gbmF2aWdhdG9yLnVzZXJBZ2VudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHN0ckluY2x1ZGVzKHVzZXJBZ2VudCwgJ3dlY2hhdCcpKSB7XG4gICAgICAgIHJldHVybiBcIndlY2hhdFwiIC8qIEJyb3dzZXJLaW5kLldlQ2hhdCAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RySW5jbHVkZXModXNlckFnZW50LCAnZmlyZWZveCcpKSB7XG4gICAgICAgIHJldHVybiBcImZpcmVmb3hcIiAvKiBCcm93c2VyS2luZC5GaXJlZm94ICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdHJJbmNsdWRlcyh1c2VyQWdlbnQsICdvcGVyYScpIHx8IHN0ckluY2x1ZGVzKHVzZXJBZ2VudCwgJ29wcicpKSB7XG4gICAgICAgIHJldHVybiBcIm9wZXJhXCIgLyogQnJvd3NlcktpbmQuT3BlcmEgKi87XG4gICAgfVxuICAgIGVsc2UgaWYgKHN0ckluY2x1ZGVzKHVzZXJBZ2VudCwgJ2Nocm9tZScpKSB7XG4gICAgICAgIHJldHVybiBcImNocm9tZVwiIC8qIEJyb3dzZXJLaW5kLkNocm9tZSAqLztcbiAgICB9XG4gICAgZWxzZSBpZiAoc3RySW5jbHVkZXModXNlckFnZW50LCAnc2FmYXJpJykpIHtcbiAgICAgICAgcmV0dXJuIFwic2FmYXJpXCIgLyogQnJvd3NlcktpbmQuU2FmYXJpICovO1xuICAgIH1cbiAgICBlbHNlIGlmIChzdHJJbmNsdWRlcyh1c2VyQWdlbnQsICd0cmlkZW50JykgfHwgc3RySW5jbHVkZXModXNlckFnZW50LCAnbXNpZScpKSB7XG4gICAgICAgIHJldHVybiBcImludGVybmV0X2V4cGxvcmVyXCIgLyogQnJvd3NlcktpbmQuSUUgKi87XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJ1bmtub3duXCIgLyogQnJvd3NlcktpbmQuVW5rbm93biAqLztcbiAgICB9XG59XG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzL2Jyb3dzZXIudHMjTDIyM1xuZXhwb3J0IGZ1bmN0aW9uIGlzQW5kcm9pZCgpIHtcbiAgICB2YXIgYnJvd3NlckVuZ2luZUtpbmQgPSBnZXRCcm93c2VyRW5naW5lS2luZCgpO1xuICAgIHZhciBpc0l0Q2hyb21pdW0gPSBicm93c2VyRW5naW5lS2luZCA9PT0gXCJjaHJvbWl1bVwiIC8qIEJyb3dzZXJFbmdpbmVLaW5kLkNocm9taXVtICovO1xuICAgIHZhciBpc0l0R2Vja28gPSBicm93c2VyRW5naW5lS2luZCA9PT0gXCJnZWNrb1wiIC8qIEJyb3dzZXJFbmdpbmVLaW5kLkdlY2tvICovO1xuICAgIC8vIE9ubHkgMiBicm93c2VyIGVuZ2luZXMgYXJlIHByZXNlbnRlZCBvbiBBbmRyb2lkLlxuICAgIC8vIEFjdHVhbGx5LCB0aGVyZSBpcyBhbHNvIEFuZHJvaWQgNC4xIGJyb3dzZXIsIGJ1dCBpdCdzIG5vdCB3b3J0aCBkZXRlY3RpbmcgaXQgYXQgdGhlIG1vbWVudC5cbiAgICBpZiAoIWlzSXRDaHJvbWl1bSAmJiAhaXNJdEdlY2tvKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHcgPSB3aW5kb3c7XG4gICAgLy8gQ2hyb21lIHJlbW92ZXMgYWxsIHdvcmRzIFwiQW5kcm9pZFwiIGZyb20gYG5hdmlnYXRvcmAgd2hlbiBkZXNrdG9wIHZlcnNpb24gaXMgcmVxdWVzdGVkXG4gICAgLy8gRmlyZWZveCBrZWVwcyBcIkFuZHJvaWRcIiBpbiBgbmF2aWdhdG9yLmFwcFZlcnNpb25gIHdoZW4gZGVza3RvcCB2ZXJzaW9uIGlzIHJlcXVlc3RlZFxuICAgIHJldHVybiAoY291bnRUcnV0aHkoW1xuICAgICAgICAnb25vcmllbnRhdGlvbmNoYW5nZScgaW4gdyxcbiAgICAgICAgJ29yaWVudGF0aW9uJyBpbiB3LFxuICAgICAgICBpc0l0Q2hyb21pdW0gJiYgISgnU2hhcmVkV29ya2VyJyBpbiB3KSxcbiAgICAgICAgaXNJdEdlY2tvICYmIC9hbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IuYXBwVmVyc2lvbiksXG4gICAgXSkgPj0gMik7XG59XG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2ZpbmdlcnByaW50anMvYmxvYi8xMDlmOGVmODAyMTY5ZGYzZmExYzVkMWJhYTRiN2JjMGFiYmMxZDkxL3NyYy91dGlscy9icm93c2VyLnRzI0wxMDJDMS1MMTE4QzJcbmV4cG9ydCBmdW5jdGlvbiBpc0Rlc2t0b3BXZWJLaXQoKSB7XG4gICAgLy8gQ2hlY2tlZCBpbiBTYWZhcmkgYW5kIER1Y2tEdWNrR29cbiAgICB2YXIgdyA9IHdpbmRvdztcbiAgICB2YXIgSFRNTEVsZW1lbnQgPSB3LkhUTUxFbGVtZW50LCBEb2N1bWVudCA9IHcuRG9jdW1lbnQ7XG4gICAgcmV0dXJuIChjb3VudFRydXRoeShbXG4gICAgICAgICdzYWZhcmknIGluIHcsXG4gICAgICAgICEoJ29uZ2VzdHVyZWVuZCcgaW4gdyksXG4gICAgICAgICEoJ1RvdWNoRXZlbnQnIGluIHcpLFxuICAgICAgICAhKCdvcmllbnRhdGlvbicgaW4gdyksXG4gICAgICAgIEhUTUxFbGVtZW50ICYmICEoJ2F1dG9jYXBpdGFsaXplJyBpbiBIVE1MRWxlbWVudC5wcm90b3R5cGUpLFxuICAgICAgICBEb2N1bWVudCAmJiAncG9pbnRlckxvY2tFbGVtZW50JyBpbiBEb2N1bWVudC5wcm90b3R5cGUsXG4gICAgXSkgPj0gNCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TW96QXBwZWFyYW5jZVN1cHBvcnQoKSB7XG4gICAgaWYgKHdpbmRvdy5DU1MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ3dpbmRvdy5DU1MgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBDU1Muc3VwcG9ydHMoJy1tb3otYXBwZWFyYW5jZScsICdhdXRvJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRGb2N1cygpIHtcbiAgICBpZiAoZG9jdW1lbnQuaGFzRm9jdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudC5oYXNGb2N1cygpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hyb21pdW04Nk9yTmV3ZXIoKSB7XG4gICAgLy8gQ2hlY2tlZCBpbiBDaHJvbWUgODUgdnMgQ2hyb21lIDg2IGJvdGggb24gZGVza3RvcCBhbmQgQW5kcm9pZFxuICAgIHZhciB3ID0gd2luZG93O1xuICAgIHJldHVybiAoY291bnRUcnV0aHkoW1xuICAgICAgICAhKCdNZWRpYVNldHRpbmdzUmFuZ2UnIGluIHcpLFxuICAgICAgICAnUlRDRW5jb2RlZEF1ZGlvRnJhbWUnIGluIHcsXG4gICAgICAgICcnICsgdy5JbnRsID09PSAnW29iamVjdCBJbnRsXScsXG4gICAgICAgICcnICsgdy5SZWZsZWN0ID09PSAnW29iamVjdCBSZWZsZWN0XScsXG4gICAgXSkgPj0gMyk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNJUGFkKCkge1xuICAgIC8vIENoZWNrZWQgb246XG4gICAgLy8gU2FmYXJpIG9uIGlQYWRPUyAoYm90aCBtb2JpbGUgYW5kIGRlc2t0b3AgbW9kZXMpOiA4LCAxMSwgMTIsIDEzLCAxNFxuICAgIC8vIENocm9tZSBvbiBpUGFkT1MgKGJvdGggbW9iaWxlIGFuZCBkZXNrdG9wIG1vZGVzKTogMTEsIDEyLCAxMywgMTRcbiAgICAvLyBTYWZhcmkgb24gaU9TIChib3RoIG1vYmlsZSBhbmQgZGVza3RvcCBtb2Rlcyk6IDksIDEwLCAxMSwgMTIsIDEzLCAxNFxuICAgIC8vIENocm9tZSBvbiBpT1MgKGJvdGggbW9iaWxlIGFuZCBkZXNrdG9wIG1vZGVzKTogOSwgMTAsIDExLCAxMiwgMTMsIDE0XG4gICAgLy8gQmVmb3JlIGlPUyAxMy4gU2FmYXJpIHRhbXBlcnMgdGhlIHZhbHVlIGluIFwicmVxdWVzdCBkZXNrdG9wIHNpdGVcIiBtb2RlIHNpbmNlIGlPUyAxMy5cbiAgICBpZiAobmF2aWdhdG9yLnBsYXRmb3JtID09PSAnaVBhZCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBzID0gc2NyZWVuO1xuICAgIHZhciBzY3JlZW5SYXRpbyA9IHMud2lkdGggLyBzLmhlaWdodDtcbiAgICByZXR1cm4gKGNvdW50VHJ1dGh5KFtcbiAgICAgICAgJ01lZGlhU291cmNlJyBpbiB3aW5kb3csXG4gICAgICAgICEhRWxlbWVudC5wcm90b3R5cGUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4sXG4gICAgICAgIC8vIGlQaG9uZSA0UyB0aGF0IHJ1bnMgaU9TIDkgbWF0Y2hlcyB0aGlzLiBCdXQgaXQgd29uJ3QgbWF0Y2ggdGhlIGNyaXRlcmlhIGFib3ZlLCBzbyBpdCB3b24ndCBiZSBkZXRlY3RlZCBhcyBpUGFkLlxuICAgICAgICBzY3JlZW5SYXRpbyA+IDAuNjUgJiYgc2NyZWVuUmF0aW8gPCAxLjUzLFxuICAgIF0pID49IDIpO1xufVxuIiwiaW1wb3J0IHsgZGV0ZWN0QXBwVmVyc2lvbiB9IGZyb20gJy4vYXBwX3ZlcnNpb24nO1xuaW1wb3J0IHsgZGV0ZWN0RG9jdW1lbnRBdHRyaWJ1dGVzIH0gZnJvbSAnLi9kb2N1bWVudF9lbGVtZW50X2tleXMnO1xuaW1wb3J0IHsgZGV0ZWN0RXJyb3JUcmFjZSB9IGZyb20gJy4vZXJyb3JfdHJhY2UnO1xuaW1wb3J0IHsgZGV0ZWN0RXZhbExlbmd0aEluY29uc2lzdGVuY3kgfSBmcm9tICcuL2V2YWxfbGVuZ3RoJztcbmltcG9ydCB7IGRldGVjdEZ1bmN0aW9uQmluZCB9IGZyb20gJy4vZnVuY3Rpb25fYmluZCc7XG5pbXBvcnQgeyBkZXRlY3RMYW5ndWFnZXNMZW5ndGhJbmNvbnNpc3RlbmN5IH0gZnJvbSAnLi9sYW5ndWFnZXNfaW5jb25zaXN0ZW5jeSc7XG5pbXBvcnQgeyBkZXRlY3RNaW1lVHlwZXNDb25zaXN0ZW50IH0gZnJvbSAnLi9taW1lX3R5cGVzX2NvbnNpc3RlbmNlJztcbmltcG9ydCB7IGRldGVjdE5vdGlmaWNhdGlvblBlcm1pc3Npb25zIH0gZnJvbSAnLi9ub3RpZmljYXRpb25fcGVybWlzc2lvbnMnO1xuaW1wb3J0IHsgZGV0ZWN0UGx1Z2luc0FycmF5IH0gZnJvbSAnLi9wbHVnaW5zX2FycmF5JztcbmltcG9ydCB7IGRldGVjdFBsdWdpbnNMZW5ndGhJbmNvbnNpc3RlbmN5IH0gZnJvbSAnLi9wbHVnaW5zX2luY29uc2lzdGVuY3knO1xuaW1wb3J0IHsgZGV0ZWN0UHJvY2VzcyB9IGZyb20gJy4vcHJvY2Vzcyc7XG5pbXBvcnQgeyBkZXRlY3RQcm9kdWN0U3ViIH0gZnJvbSAnLi9wcm9kdWN0X3N1Yic7XG5pbXBvcnQgeyBkZXRlY3RVc2VyQWdlbnQgfSBmcm9tICcuL3VzZXJfYWdlbnQnO1xuaW1wb3J0IHsgZGV0ZWN0V2ViRHJpdmVyIH0gZnJvbSAnLi93ZWJkcml2ZXInO1xuaW1wb3J0IHsgZGV0ZWN0V2ViR0wgfSBmcm9tICcuL3dlYmdsJztcbmltcG9ydCB7IGRldGVjdFdpbmRvd0V4dGVybmFsIH0gZnJvbSAnLi93aW5kb3dfZXh0ZXJuYWwnO1xuaW1wb3J0IHsgZGV0ZWN0V2luZG93U2l6ZSB9IGZyb20gJy4vd2luZG93X3NpemUnO1xuaW1wb3J0IHsgZGV0ZWN0RGlzdGluY3RpdmVQcm9wZXJ0aWVzIH0gZnJvbSAnLi9kaXN0aW5jdGl2ZV9wcm9wZXJ0aWVzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG5leHBvcnQgdmFyIGRldGVjdG9ycyA9IHtcbiAgICBkZXRlY3RBcHBWZXJzaW9uOiBkZXRlY3RBcHBWZXJzaW9uLFxuICAgIGRldGVjdERvY3VtZW50QXR0cmlidXRlczogZGV0ZWN0RG9jdW1lbnRBdHRyaWJ1dGVzLFxuICAgIGRldGVjdEVycm9yVHJhY2U6IGRldGVjdEVycm9yVHJhY2UsXG4gICAgZGV0ZWN0RXZhbExlbmd0aEluY29uc2lzdGVuY3k6IGRldGVjdEV2YWxMZW5ndGhJbmNvbnNpc3RlbmN5LFxuICAgIGRldGVjdEZ1bmN0aW9uQmluZDogZGV0ZWN0RnVuY3Rpb25CaW5kLFxuICAgIGRldGVjdExhbmd1YWdlc0xlbmd0aEluY29uc2lzdGVuY3k6IGRldGVjdExhbmd1YWdlc0xlbmd0aEluY29uc2lzdGVuY3ksXG4gICAgZGV0ZWN0Tm90aWZpY2F0aW9uUGVybWlzc2lvbnM6IGRldGVjdE5vdGlmaWNhdGlvblBlcm1pc3Npb25zLFxuICAgIGRldGVjdFBsdWdpbnNBcnJheTogZGV0ZWN0UGx1Z2luc0FycmF5LFxuICAgIGRldGVjdFBsdWdpbnNMZW5ndGhJbmNvbnNpc3RlbmN5OiBkZXRlY3RQbHVnaW5zTGVuZ3RoSW5jb25zaXN0ZW5jeSxcbiAgICBkZXRlY3RQcm9jZXNzOiBkZXRlY3RQcm9jZXNzLFxuICAgIGRldGVjdFVzZXJBZ2VudDogZGV0ZWN0VXNlckFnZW50LFxuICAgIGRldGVjdFdlYkRyaXZlcjogZGV0ZWN0V2ViRHJpdmVyLFxuICAgIGRldGVjdFdlYkdMOiBkZXRlY3RXZWJHTCxcbiAgICBkZXRlY3RXaW5kb3dFeHRlcm5hbDogZGV0ZWN0V2luZG93RXh0ZXJuYWwsXG4gICAgZGV0ZWN0V2luZG93U2l6ZTogZGV0ZWN0V2luZG93U2l6ZSxcbiAgICBkZXRlY3RNaW1lVHlwZXNDb25zaXN0ZW50OiBkZXRlY3RNaW1lVHlwZXNDb25zaXN0ZW50LFxuICAgIGRldGVjdFByb2R1Y3RTdWI6IGRldGVjdFByb2R1Y3RTdWIsXG4gICAgZGV0ZWN0RGlzdGluY3RpdmVQcm9wZXJ0aWVzOiBkZXRlY3REaXN0aW5jdGl2ZVByb3BlcnRpZXMsXG59O1xuIiwiaW1wb3J0IHsgQm90S2luZCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RBcHBWZXJzaW9uKF9hKSB7XG4gICAgdmFyIGFwcFZlcnNpb24gPSBfYS5hcHBWZXJzaW9uO1xuICAgIGlmIChhcHBWZXJzaW9uLnN0YXRlICE9PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoL2hlYWRsZXNzL2kudGVzdChhcHBWZXJzaW9uLnZhbHVlKSlcbiAgICAgICAgcmV0dXJuIEJvdEtpbmQuSGVhZGxlc3NDaHJvbWU7XG4gICAgaWYgKC9lbGVjdHJvbi9pLnRlc3QoYXBwVmVyc2lvbi52YWx1ZSkpXG4gICAgICAgIHJldHVybiBCb3RLaW5kLkVsZWN0cm9uO1xuICAgIGlmICgvc2xpbWVyanMvaS50ZXN0KGFwcFZlcnNpb24udmFsdWUpKVxuICAgICAgICByZXR1cm4gQm90S2luZC5TbGltZXJKUztcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpbmNsdWRlcyB9IGZyb20gJy4uL3V0aWxzL21pc2MnO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdERvY3VtZW50QXR0cmlidXRlcyhfYSkge1xuICAgIHZhciBkb2N1bWVudEVsZW1lbnRLZXlzID0gX2EuZG9jdW1lbnRFbGVtZW50S2V5cztcbiAgICBpZiAoZG9jdW1lbnRFbGVtZW50S2V5cy5zdGF0ZSAhPT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGluY2x1ZGVzKGRvY3VtZW50RWxlbWVudEtleXMudmFsdWUsICdzZWxlbml1bScsICd3ZWJkcml2ZXInLCAnZHJpdmVyJykpIHtcbiAgICAgICAgcmV0dXJuIEJvdEtpbmQuU2VsZW5pdW07XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQm90S2luZCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RFcnJvclRyYWNlKF9hKSB7XG4gICAgdmFyIGVycm9yVHJhY2UgPSBfYS5lcnJvclRyYWNlO1xuICAgIGlmIChlcnJvclRyYWNlLnN0YXRlICE9PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoL1BoYW50b21KUy9pLnRlc3QoZXJyb3JUcmFjZS52YWx1ZSkpXG4gICAgICAgIHJldHVybiBCb3RLaW5kLlBoYW50b21KUztcbn1cbiIsImltcG9ydCB7IGFycmF5SW5jbHVkZXMgfSBmcm9tICcuLi91dGlscy9wb255ZmlsbHMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlckVuZ2luZUtpbmQsIGdldEJyb3dzZXJLaW5kIH0gZnJvbSAnLi4vdXRpbHMvYnJvd3Nlcic7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0RXZhbExlbmd0aEluY29uc2lzdGVuY3koX2EpIHtcbiAgICB2YXIgZXZhbExlbmd0aCA9IF9hLmV2YWxMZW5ndGg7XG4gICAgaWYgKGV2YWxMZW5ndGguc3RhdGUgIT09IDAgLyogU3RhdGUuU3VjY2VzcyAqLylcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBsZW5ndGggPSBldmFsTGVuZ3RoLnZhbHVlO1xuICAgIHZhciBicm93c2VyID0gZ2V0QnJvd3NlcktpbmQoKTtcbiAgICB2YXIgYnJvd3NlckVuZ2luZSA9IGdldEJyb3dzZXJFbmdpbmVLaW5kKCk7XG4gICAgaWYgKGJyb3dzZXJFbmdpbmUgPT0gXCJ1bmtub3duXCIgLyogQnJvd3NlckVuZ2luZUtpbmQuVW5rbm93biAqLykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoKGxlbmd0aCA9PT0gMzcgJiYgIWFycmF5SW5jbHVkZXMoW1wid2Via2l0XCIgLyogQnJvd3NlckVuZ2luZUtpbmQuV2Via2l0ICovLCBcImdlY2tvXCIgLyogQnJvd3NlckVuZ2luZUtpbmQuR2Vja28gKi9dLCBicm93c2VyRW5naW5lKSkgfHxcbiAgICAgICAgKGxlbmd0aCA9PT0gMzkgJiYgIWFycmF5SW5jbHVkZXMoW1wiaW50ZXJuZXRfZXhwbG9yZXJcIiAvKiBCcm93c2VyS2luZC5JRSAqL10sIGJyb3dzZXIpKSB8fFxuICAgICAgICAobGVuZ3RoID09PSAzMyAmJiAhYXJyYXlJbmNsdWRlcyhbXCJjaHJvbWl1bVwiIC8qIEJyb3dzZXJFbmdpbmVLaW5kLkNocm9taXVtICovXSwgYnJvd3NlckVuZ2luZSkpKTtcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0RnVuY3Rpb25CaW5kKF9hKSB7XG4gICAgdmFyIGZ1bmN0aW9uQmluZCA9IF9hLmZ1bmN0aW9uQmluZDtcbiAgICBpZiAoZnVuY3Rpb25CaW5kLnN0YXRlID09PSAtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLylcbiAgICAgICAgcmV0dXJuIEJvdEtpbmQuUGhhbnRvbUpTO1xufVxuIiwiaW1wb3J0IHsgQm90S2luZCB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RMYW5ndWFnZXNMZW5ndGhJbmNvbnNpc3RlbmN5KF9hKSB7XG4gICAgdmFyIGxhbmd1YWdlcyA9IF9hLmxhbmd1YWdlcztcbiAgICBpZiAobGFuZ3VhZ2VzLnN0YXRlID09PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8gJiYgbGFuZ3VhZ2VzLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBCb3RLaW5kIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlcktpbmQgfSBmcm9tICcuLi91dGlscy9icm93c2VyJztcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3ROb3RpZmljYXRpb25QZXJtaXNzaW9ucyhfYSkge1xuICAgIHZhciBub3RpZmljYXRpb25QZXJtaXNzaW9ucyA9IF9hLm5vdGlmaWNhdGlvblBlcm1pc3Npb25zO1xuICAgIHZhciBicm93c2VyS2luZCA9IGdldEJyb3dzZXJLaW5kKCk7XG4gICAgaWYgKGJyb3dzZXJLaW5kICE9PSBcImNocm9tZVwiIC8qIEJyb3dzZXJLaW5kLkNocm9tZSAqLylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChub3RpZmljYXRpb25QZXJtaXNzaW9ucy5zdGF0ZSA9PT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovICYmIG5vdGlmaWNhdGlvblBlcm1pc3Npb25zLnZhbHVlKSB7XG4gICAgICAgIHJldHVybiBCb3RLaW5kLkhlYWRsZXNzQ2hyb21lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UGx1Z2luc0FycmF5KF9hKSB7XG4gICAgdmFyIHBsdWdpbnNBcnJheSA9IF9hLnBsdWdpbnNBcnJheTtcbiAgICBpZiAocGx1Z2luc0FycmF5LnN0YXRlID09PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8gJiYgIXBsdWdpbnNBcnJheS52YWx1ZSlcbiAgICAgICAgcmV0dXJuIEJvdEtpbmQuSGVhZGxlc3NDaHJvbWU7XG59XG4iLCJpbXBvcnQgeyBCb3RLaW5kIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlckVuZ2luZUtpbmQsIGdldEJyb3dzZXJLaW5kLCBpc0FuZHJvaWQgfSBmcm9tICcuLi91dGlscy9icm93c2VyJztcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RQbHVnaW5zTGVuZ3RoSW5jb25zaXN0ZW5jeShfYSkge1xuICAgIHZhciBwbHVnaW5zTGVuZ3RoID0gX2EucGx1Z2luc0xlbmd0aDtcbiAgICBpZiAocGx1Z2luc0xlbmd0aC5zdGF0ZSAhPT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGJyb3dzZXJLaW5kID0gZ2V0QnJvd3NlcktpbmQoKTtcbiAgICB2YXIgYnJvd3NlckVuZ2luZUtpbmQgPSBnZXRCcm93c2VyRW5naW5lS2luZCgpO1xuICAgIGlmIChicm93c2VyS2luZCAhPT0gXCJjaHJvbWVcIiAvKiBCcm93c2VyS2luZC5DaHJvbWUgKi8gfHwgaXNBbmRyb2lkKCkgfHwgYnJvd3NlckVuZ2luZUtpbmQgIT09IFwiY2hyb21pdW1cIiAvKiBCcm93c2VyRW5naW5lS2luZC5DaHJvbWl1bSAqLylcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChwbHVnaW5zTGVuZ3RoLnZhbHVlID09PSAwKVxuICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UHJvY2VzcyhfYSkge1xuICAgIHZhciBfYjtcbiAgICB2YXIgcHJvY2VzcyA9IF9hLnByb2Nlc3M7XG4gICAgaWYgKHByb2Nlc3Muc3RhdGUgIT09IDAgLyogU3RhdGUuU3VjY2VzcyAqLylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChwcm9jZXNzLnZhbHVlLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgKChfYiA9IHByb2Nlc3MudmFsdWUudmVyc2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5lbGVjdHJvbikgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIEJvdEtpbmQuRWxlY3Ryb247XG59XG4iLCJpbXBvcnQgeyBCb3RLaW5kIH0gZnJvbSAnLi4vdHlwZXMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdFVzZXJBZ2VudChfYSkge1xuICAgIHZhciB1c2VyQWdlbnQgPSBfYS51c2VyQWdlbnQ7XG4gICAgaWYgKHVzZXJBZ2VudC5zdGF0ZSAhPT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgaWYgKC9QaGFudG9tSlMvaS50ZXN0KHVzZXJBZ2VudC52YWx1ZSkpXG4gICAgICAgIHJldHVybiBCb3RLaW5kLlBoYW50b21KUztcbiAgICBpZiAoL0hlYWRsZXNzL2kudGVzdCh1c2VyQWdlbnQudmFsdWUpKVxuICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbiAgICBpZiAoL0VsZWN0cm9uL2kudGVzdCh1c2VyQWdlbnQudmFsdWUpKVxuICAgICAgICByZXR1cm4gQm90S2luZC5FbGVjdHJvbjtcbiAgICBpZiAoL3NsaW1lcmpzL2kudGVzdCh1c2VyQWdlbnQudmFsdWUpKVxuICAgICAgICByZXR1cm4gQm90S2luZC5TbGltZXJKUztcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0V2ViRHJpdmVyKF9hKSB7XG4gICAgdmFyIHdlYkRyaXZlciA9IF9hLndlYkRyaXZlcjtcbiAgICBpZiAod2ViRHJpdmVyLnN0YXRlID09PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8gJiYgd2ViRHJpdmVyLnZhbHVlKVxuICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0V2ViR0woX2EpIHtcbiAgICB2YXIgd2ViR0wgPSBfYS53ZWJHTDtcbiAgICBpZiAod2ViR0wuc3RhdGUgPT09IDAgLyogU3RhdGUuU3VjY2VzcyAqLykge1xuICAgICAgICB2YXIgX2IgPSB3ZWJHTC52YWx1ZSwgdmVuZG9yID0gX2IudmVuZG9yLCByZW5kZXJlciA9IF9iLnJlbmRlcmVyO1xuICAgICAgICBpZiAodmVuZG9yID09ICdCcmlhbiBQYXVsJyAmJiByZW5kZXJlciA9PSAnTWVzYSBPZmZTY3JlZW4nKSB7XG4gICAgICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0V2luZG93RXh0ZXJuYWwoX2EpIHtcbiAgICB2YXIgd2luZG93RXh0ZXJuYWwgPSBfYS53aW5kb3dFeHRlcm5hbDtcbiAgICBpZiAod2luZG93RXh0ZXJuYWwuc3RhdGUgIT09IDAgLyogU3RhdGUuU3VjY2VzcyAqLylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmICgvU2VxdWVudHVtL2kudGVzdCh3aW5kb3dFeHRlcm5hbC52YWx1ZSkpXG4gICAgICAgIHJldHVybiBCb3RLaW5kLlNlcXVlbnR1bTtcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBnZXREb2N1bWVudEZvY3VzIH0gZnJvbSAnLi4vdXRpbHMvYnJvd3Nlcic7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0V2luZG93U2l6ZShfYSkge1xuICAgIHZhciB3aW5kb3dTaXplID0gX2Eud2luZG93U2l6ZTtcbiAgICBpZiAod2luZG93U2l6ZS5zdGF0ZSAhPT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIF9iID0gd2luZG93U2l6ZS52YWx1ZSwgb3V0ZXJXaWR0aCA9IF9iLm91dGVyV2lkdGgsIG91dGVySGVpZ2h0ID0gX2Iub3V0ZXJIZWlnaHQ7XG4gICAgLy8gV2hlbiBhIHBhZ2UgaXMgb3BlbmVkIGluIGEgbmV3IHRhYiB3aXRob3V0IGZvY3VzaW5nIGl0IHJpZ2h0IGF3YXksIHRoZSB3aW5kb3cgb3V0ZXIgc2l6ZSBpcyAweDBcbiAgICBpZiAoIWdldERvY3VtZW50Rm9jdXMoKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvdXRlcldpZHRoID09PSAwICYmIG91dGVySGVpZ2h0ID09PSAwKVxuICAgICAgICByZXR1cm4gQm90S2luZC5IZWFkbGVzc0Nocm9tZTtcbn1cbiIsImltcG9ydCB7IEJvdEtpbmQgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0TWltZVR5cGVzQ29uc2lzdGVudChfYSkge1xuICAgIHZhciBtaW1lVHlwZXNDb25zaXN0ZW50ID0gX2EubWltZVR5cGVzQ29uc2lzdGVudDtcbiAgICBpZiAobWltZVR5cGVzQ29uc2lzdGVudC5zdGF0ZSA9PT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovICYmICFtaW1lVHlwZXNDb25zaXN0ZW50LnZhbHVlKSB7XG4gICAgICAgIHJldHVybiBCb3RLaW5kLlVua25vd247XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQm90S2luZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGdldEJyb3dzZXJLaW5kIH0gZnJvbSAnLi4vdXRpbHMvYnJvd3Nlcic7XG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0UHJvZHVjdFN1YihfYSkge1xuICAgIHZhciBwcm9kdWN0U3ViID0gX2EucHJvZHVjdFN1YjtcbiAgICBpZiAocHJvZHVjdFN1Yi5zdGF0ZSAhPT0gMCAvKiBTdGF0ZS5TdWNjZXNzICovKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGJyb3dzZXJLaW5kID0gZ2V0QnJvd3NlcktpbmQoKTtcbiAgICBpZiAoKGJyb3dzZXJLaW5kID09PSBcImNocm9tZVwiIC8qIEJyb3dzZXJLaW5kLkNocm9tZSAqLyB8fFxuICAgICAgICBicm93c2VyS2luZCA9PT0gXCJzYWZhcmlcIiAvKiBCcm93c2VyS2luZC5TYWZhcmkgKi8gfHxcbiAgICAgICAgYnJvd3NlcktpbmQgPT09IFwib3BlcmFcIiAvKiBCcm93c2VyS2luZC5PcGVyYSAqLyB8fFxuICAgICAgICBicm93c2VyS2luZCA9PT0gXCJ3ZWNoYXRcIiAvKiBCcm93c2VyS2luZC5XZUNoYXQgKi8pICYmXG4gICAgICAgIHByb2R1Y3RTdWIudmFsdWUgIT09ICcyMDAzMDEwNycpXG4gICAgICAgIHJldHVybiBCb3RLaW5kLlVua25vd247XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGV0ZWN0RGlzdGluY3RpdmVQcm9wZXJ0aWVzKF9hKSB7XG4gICAgdmFyIGRpc3RpbmN0aXZlUHJvcHMgPSBfYS5kaXN0aW5jdGl2ZVByb3BzO1xuICAgIGlmIChkaXN0aW5jdGl2ZVByb3BzLnN0YXRlICE9PSAwIC8qIFN0YXRlLlN1Y2Nlc3MgKi8pXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB2YXIgdmFsdWUgPSBkaXN0aW5jdGl2ZVByb3BzLnZhbHVlO1xuICAgIHZhciBib3Q7XG4gICAgZm9yIChib3QgaW4gdmFsdWUpXG4gICAgICAgIGlmICh2YWx1ZVtib3RdKVxuICAgICAgICAgICAgcmV0dXJuIGJvdDtcbn1cbiIsImltcG9ydCBnZXRBcHBWZXJzaW9uIGZyb20gJy4vYXBwX3ZlcnNpb24nO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudEtleXMgZnJvbSAnLi9kb2N1bWVudF9lbGVtZW50X2tleXMnO1xuaW1wb3J0IGdldEVycm9yVHJhY2UgZnJvbSAnLi9lcnJvcl90cmFjZSc7XG5pbXBvcnQgZ2V0RXZhbExlbmd0aCBmcm9tICcuL2V2YWxfbGVuZ3RoJztcbmltcG9ydCBnZXRGdW5jdGlvbkJpbmQgZnJvbSAnLi9mdW5jdGlvbl9iaW5kJztcbmltcG9ydCBnZXRMYW5ndWFnZXMgZnJvbSAnLi9sYW5ndWFnZXMnO1xuaW1wb3J0IGFyZU1pbWVUeXBlc0NvbnNpc3RlbnQgZnJvbSAnLi9taW1lX3R5cGVzX2NvbnNpc3RlbmNlJztcbmltcG9ydCBnZXROb3RpZmljYXRpb25QZXJtaXNzaW9ucyBmcm9tICcuL25vdGlmaWNhdGlvbl9wZXJtaXNzaW9ucyc7XG5pbXBvcnQgZ2V0UGx1Z2luc0FycmF5IGZyb20gJy4vcGx1Z2luc19hcnJheSc7XG5pbXBvcnQgZ2V0UGx1Z2luc0xlbmd0aCBmcm9tICcuL3BsdWdpbnNfbGVuZ3RoJztcbmltcG9ydCBnZXRQcm9jZXNzIGZyb20gJy4vcHJvY2Vzcyc7XG5pbXBvcnQgZ2V0UHJvZHVjdFN1YiBmcm9tICcuL3Byb2R1Y3Rfc3ViJztcbmltcG9ydCBnZXRSVFQgZnJvbSAnLi9ydHQnO1xuaW1wb3J0IGdldFVzZXJBZ2VudCBmcm9tICcuL3VzZXJfYWdlbnQnO1xuaW1wb3J0IGdldFdlYkRyaXZlciBmcm9tICcuL3dlYmRyaXZlcic7XG5pbXBvcnQgZ2V0V2ViR0wgZnJvbSAnLi93ZWJnbCc7XG5pbXBvcnQgZ2V0V2luZG93RXh0ZXJuYWwgZnJvbSAnLi93aW5kb3dfZXh0ZXJuYWwnO1xuaW1wb3J0IGdldFdpbmRvd1NpemUgZnJvbSAnLi93aW5kb3dfc2l6ZSc7XG5pbXBvcnQgY2hlY2tEaXN0aW5jdGl2ZVByb3BlcnRpZXMgZnJvbSAnLi9kaXN0aW5jdGl2ZV9wcm9wZXJ0aWVzJztcbmV4cG9ydCB2YXIgc291cmNlcyA9IHtcbiAgICB1c2VyQWdlbnQ6IGdldFVzZXJBZ2VudCxcbiAgICBhcHBWZXJzaW9uOiBnZXRBcHBWZXJzaW9uLFxuICAgIHJ0dDogZ2V0UlRULFxuICAgIHdpbmRvd1NpemU6IGdldFdpbmRvd1NpemUsXG4gICAgcGx1Z2luc0xlbmd0aDogZ2V0UGx1Z2luc0xlbmd0aCxcbiAgICBwbHVnaW5zQXJyYXk6IGdldFBsdWdpbnNBcnJheSxcbiAgICBlcnJvclRyYWNlOiBnZXRFcnJvclRyYWNlLFxuICAgIHByb2R1Y3RTdWI6IGdldFByb2R1Y3RTdWIsXG4gICAgd2luZG93RXh0ZXJuYWw6IGdldFdpbmRvd0V4dGVybmFsLFxuICAgIG1pbWVUeXBlc0NvbnNpc3RlbnQ6IGFyZU1pbWVUeXBlc0NvbnNpc3RlbnQsXG4gICAgZXZhbExlbmd0aDogZ2V0RXZhbExlbmd0aCxcbiAgICB3ZWJHTDogZ2V0V2ViR0wsXG4gICAgd2ViRHJpdmVyOiBnZXRXZWJEcml2ZXIsXG4gICAgbGFuZ3VhZ2VzOiBnZXRMYW5ndWFnZXMsXG4gICAgbm90aWZpY2F0aW9uUGVybWlzc2lvbnM6IGdldE5vdGlmaWNhdGlvblBlcm1pc3Npb25zLFxuICAgIGRvY3VtZW50RWxlbWVudEtleXM6IGdldERvY3VtZW50RWxlbWVudEtleXMsXG4gICAgZnVuY3Rpb25CaW5kOiBnZXRGdW5jdGlvbkJpbmQsXG4gICAgcHJvY2VzczogZ2V0UHJvY2VzcyxcbiAgICBkaXN0aW5jdGl2ZVByb3BzOiBjaGVja0Rpc3RpbmN0aXZlUHJvcGVydGllcyxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VyQWdlbnQoKSB7XG4gICAgcmV0dXJuIG5hdmlnYXRvci51c2VyQWdlbnQ7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBcHBWZXJzaW9uKCkge1xuICAgIHZhciBhcHBWZXJzaW9uID0gbmF2aWdhdG9yLmFwcFZlcnNpb247XG4gICAgaWYgKGFwcFZlcnNpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTEgLyogU3RhdGUuVW5kZWZpbmVkICovLCAnbmF2aWdhdG9yLmFwcFZlcnNpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBhcHBWZXJzaW9uO1xufVxuIiwiaW1wb3J0IHsgQm90ZEVycm9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UlRUKCkge1xuICAgIGlmIChuYXZpZ2F0b3IuY29ubmVjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTEgLyogU3RhdGUuVW5kZWZpbmVkICovLCAnbmF2aWdhdG9yLmNvbm5lY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGlmIChuYXZpZ2F0b3IuY29ubmVjdGlvbi5ydHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ25hdmlnYXRvci5jb25uZWN0aW9uLnJ0dCBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5hdmlnYXRvci5jb25uZWN0aW9uLnJ0dDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1NpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgb3V0ZXJXaWR0aDogd2luZG93Lm91dGVyV2lkdGgsXG4gICAgICAgIG91dGVySGVpZ2h0OiB3aW5kb3cub3V0ZXJIZWlnaHQsXG4gICAgICAgIGlubmVyV2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLFxuICAgICAgICBpbm5lckhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgIH07XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQbHVnaW5zTGVuZ3RoKCkge1xuICAgIGlmIChuYXZpZ2F0b3IucGx1Z2lucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTEgLyogU3RhdGUuVW5kZWZpbmVkICovLCAnbmF2aWdhdG9yLnBsdWdpbnMgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIGlmIChuYXZpZ2F0b3IucGx1Z2lucy5sZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0zIC8qIFN0YXRlLlVuZXhwZWN0ZWRCZWhhdmlvdXIgKi8sICduYXZpZ2F0b3IucGx1Z2lucy5sZW5ndGggaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBuYXZpZ2F0b3IucGx1Z2lucy5sZW5ndGg7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQbHVnaW5zQXJyYXkoKSB7XG4gICAgaWYgKG5hdmlnYXRvci5wbHVnaW5zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMSAvKiBTdGF0ZS5VbmRlZmluZWQgKi8sICduYXZpZ2F0b3IucGx1Z2lucyBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5QbHVnaW5BcnJheSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTEgLyogU3RhdGUuVW5kZWZpbmVkICovLCAnd2luZG93LlBsdWdpbkFycmF5IGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yLnBsdWdpbnMgaW5zdGFuY2VvZiBQbHVnaW5BcnJheTtcbn1cbiIsImltcG9ydCB7IEJvdGRFcnJvciB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEVycm9yVHJhY2UoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIG51bGxbMF0oKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmIGVycm9yWydzdGFjayddICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci5zdGFjay50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTMgLyogU3RhdGUuVW5leHBlY3RlZEJlaGF2aW91ciAqLywgJ2Vycm9yVHJhY2Ugc2lnbmFsIHVuZXhwZWN0ZWQgYmVoYXZpb3VyJyk7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQcm9kdWN0U3ViKCkge1xuICAgIHZhciBwcm9kdWN0U3ViID0gbmF2aWdhdG9yLnByb2R1Y3RTdWI7XG4gICAgaWYgKHByb2R1Y3RTdWIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ25hdmlnYXRvci5wcm9kdWN0U3ViIGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvZHVjdFN1Yjtcbn1cbiIsImltcG9ydCB7IEJvdGRFcnJvciB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd0V4dGVybmFsKCkge1xuICAgIGlmICh3aW5kb3cuZXh0ZXJuYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ3dpbmRvdy5leHRlcm5hbCBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgdmFyIGV4dGVybmFsID0gd2luZG93LmV4dGVybmFsO1xuICAgIGlmICh0eXBlb2YgZXh0ZXJuYWwudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLywgJ3dpbmRvdy5leHRlcm5hbC50b1N0cmluZyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gZXh0ZXJuYWwudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IEJvdGRFcnJvciB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFyZU1pbWVUeXBlc0NvbnNpc3RlbnQoKSB7XG4gICAgaWYgKG5hdmlnYXRvci5taW1lVHlwZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ25hdmlnYXRvci5taW1lVHlwZXMgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBtaW1lVHlwZXMgPSBuYXZpZ2F0b3IubWltZVR5cGVzO1xuICAgIHZhciBpc0NvbnNpc3RlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobWltZVR5cGVzKSA9PT0gTWltZVR5cGVBcnJheS5wcm90b3R5cGU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW1lVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXNDb25zaXN0ZW50ICYmIChpc0NvbnNpc3RlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobWltZVR5cGVzW2ldKSA9PT0gTWltZVR5cGUucHJvdG90eXBlKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQ29uc2lzdGVudDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEV2YWxMZW5ndGgoKSB7XG4gICAgcmV0dXJuIGV2YWwudG9TdHJpbmcoKS5sZW5ndGg7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXZWJHTCgpIHtcbiAgICB2YXIgY2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGlmICh0eXBlb2YgY2FudmFzRWxlbWVudC5nZXRDb250ZXh0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBCb3RkRXJyb3IoLTIgLyogU3RhdGUuTm90RnVuY3Rpb24gKi8sICdIVE1MQ2FudmFzRWxlbWVudC5nZXRDb250ZXh0IGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciB3ZWJHTENvbnRleHQgPSBjYW52YXNFbGVtZW50LmdldENvbnRleHQoJ3dlYmdsJyk7XG4gICAgaWYgKHdlYkdMQ29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC00IC8qIFN0YXRlLk51bGwgKi8sICdXZWJHTFJlbmRlcmluZ0NvbnRleHQgaXMgbnVsbCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdlYkdMQ29udGV4dC5nZXRQYXJhbWV0ZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLywgJ1dlYkdMUmVuZGVyaW5nQ29udGV4dC5nZXRQYXJhbWV0ZXIgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIHZlbmRvciA9IHdlYkdMQ29udGV4dC5nZXRQYXJhbWV0ZXIod2ViR0xDb250ZXh0LlZFTkRPUik7XG4gICAgdmFyIHJlbmRlcmVyID0gd2ViR0xDb250ZXh0LmdldFBhcmFtZXRlcih3ZWJHTENvbnRleHQuUkVOREVSRVIpO1xuICAgIHJldHVybiB7IHZlbmRvcjogdmVuZG9yLCByZW5kZXJlcjogcmVuZGVyZXIgfTtcbn1cbiIsImltcG9ydCB7IEJvdGRFcnJvciB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdlYkRyaXZlcigpIHtcbiAgICBpZiAobmF2aWdhdG9yLndlYmRyaXZlciA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMSAvKiBTdGF0ZS5VbmRlZmluZWQgKi8sICduYXZpZ2F0b3Iud2ViZHJpdmVyIGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmF2aWdhdG9yLndlYmRyaXZlcjtcbn1cbiIsImltcG9ydCB7IGdldEJyb3dzZXJFbmdpbmVLaW5kLCBpc0Nocm9taXVtODZPck5ld2VyIH0gZnJvbSAnLi4vdXRpbHMvYnJvd3Nlcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRMYW5ndWFnZXMoKSB7XG4gICAgdmFyIG4gPSBuYXZpZ2F0b3I7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBsYW5ndWFnZSA9IG4ubGFuZ3VhZ2UgfHwgbi51c2VyTGFuZ3VhZ2UgfHwgbi5icm93c2VyTGFuZ3VhZ2UgfHwgbi5zeXN0ZW1MYW5ndWFnZTtcbiAgICBpZiAobGFuZ3VhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQucHVzaChbbGFuZ3VhZ2VdKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobi5sYW5ndWFnZXMpKSB7XG4gICAgICAgIHZhciBicm93c2VyRW5naW5lID0gZ2V0QnJvd3NlckVuZ2luZUtpbmQoKTtcbiAgICAgICAgLy8gU3RhcnRpbmcgZnJvbSBDaHJvbWl1bSA4NiwgdGhlcmUgaXMgb25seSBhIHNpbmdsZSB2YWx1ZSBpbiBgbmF2aWdhdG9yLmxhbmd1YWdlYCBpbiBJbmNvZ25pdG8gbW9kZTpcbiAgICAgICAgLy8gdGhlIHZhbHVlIG9mIGBuYXZpZ2F0b3IubGFuZ3VhZ2VgLiBUaGVyZWZvcmUsIHRoZSB2YWx1ZSBpcyBpZ25vcmVkIGluIHRoaXMgYnJvd3Nlci5cbiAgICAgICAgaWYgKCEoYnJvd3NlckVuZ2luZSA9PT0gXCJjaHJvbWl1bVwiIC8qIEJyb3dzZXJFbmdpbmVLaW5kLkNocm9taXVtICovICYmIGlzQ2hyb21pdW04Nk9yTmV3ZXIoKSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG4ubGFuZ3VhZ2VzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygbi5sYW5ndWFnZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBsYW5ndWFnZXMgPSBuLmxhbmd1YWdlcztcbiAgICAgICAgaWYgKGxhbmd1YWdlcykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobGFuZ3VhZ2VzLnNwbGl0KCcsJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgeyBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb3RpZmljYXRpb25QZXJtaXNzaW9ucygpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwZXJtaXNzaW9ucywgcGVybWlzc2lvblN0YXR1cywgZV8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lk5vdGlmaWNhdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ3dpbmRvdy5Ob3RpZmljYXRpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5wZXJtaXNzaW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQm90ZEVycm9yKC0xIC8qIFN0YXRlLlVuZGVmaW5lZCAqLywgJ25hdmlnYXRvci5wZXJtaXNzaW9ucyBpcyB1bmRlZmluZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9ucyA9IG5hdmlnYXRvci5wZXJtaXNzaW9ucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwZXJtaXNzaW9ucy5xdWVyeSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLywgJ25hdmlnYXRvci5wZXJtaXNzaW9ucy5xdWVyeSBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHBlcm1pc3Npb25zLnF1ZXJ5KHsgbmFtZTogJ25vdGlmaWNhdGlvbnMnIH0pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHBlcm1pc3Npb25TdGF0dXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB3aW5kb3cuTm90aWZpY2F0aW9uLnBlcm1pc3Npb24gPT09ICdkZW5pZWQnICYmIHBlcm1pc3Npb25TdGF0dXMuc3RhdGUgPT09ICdwcm9tcHQnXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGVfMSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMyAvKiBTdGF0ZS5VbmV4cGVjdGVkQmVoYXZpb3VyICovLCAnbm90aWZpY2F0aW9uUGVybWlzc2lvbnMgc2lnbmFsIHVuZXhwZWN0ZWQgYmVoYXZpb3VyJyk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgQm90ZEVycm9yIH0gZnJvbSAnLi4vdHlwZXMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50S2V5cygpIHtcbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMSAvKiBTdGF0ZS5VbmRlZmluZWQgKi8sICdkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgaXMgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlTmFtZXMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLywgJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRBdHRyaWJ1dGVOYW1lcyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cbiAgICByZXR1cm4gZG9jdW1lbnRFbGVtZW50LmdldEF0dHJpYnV0ZU5hbWVzKCk7XG59XG4iLCJpbXBvcnQgeyBCb3RkRXJyb3IgfSBmcm9tICcuLi90eXBlcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGdW5jdGlvbkJpbmQoKSB7XG4gICAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMiAvKiBTdGF0ZS5Ob3RGdW5jdGlvbiAqLywgJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQudG9TdHJpbmcoKTtcbn1cbiIsImltcG9ydCB7IEJvdGRFcnJvciB9IGZyb20gJy4uL3R5cGVzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFByb2Nlc3MoKSB7XG4gICAgaWYgKHdpbmRvdy5wcm9jZXNzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJvdGRFcnJvcigtMSAvKiBTdGF0ZS5VbmRlZmluZWQgKi8sICd3aW5kb3cucHJvY2VzcyBpcyB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5wcm9jZXNzO1xufVxuIiwiaW1wb3J0IHsgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQm90S2luZCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGdldE9iamVjdFByb3BzLCBpbmNsdWRlcyB9IGZyb20gJy4uL3V0aWxzL21pc2MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2hlY2tEaXN0aW5jdGl2ZVByb3BlcnRpZXMoKSB7XG4gICAgdmFyIF9hO1xuICAgIC8vIFRoZSBvcmRlciBpbiB0aGUgZm9sbG93aW5nIGxpc3QgbWF0dGVycywgYmVjYXVzZSBzcGVjaWZpYyB0eXBlcyBvZiBib3RzIGNvbWUgZmlyc3QsIGZvbGxvd2VkIGJ5IGF1dG9tYXRpb24gdGVjaG5vbG9naWVzLlxuICAgIHZhciBkaXN0aW5jdGl2ZVByb3BzTGlzdCA9IChfYSA9IHt9LFxuICAgICAgICBfYVtCb3RLaW5kLkF3ZXNvbWl1bV0gPSB7XG4gICAgICAgICAgICB3aW5kb3c6IFsnYXdlc29taXVtJ10sXG4gICAgICAgIH0sXG4gICAgICAgIF9hW0JvdEtpbmQuQ2VmXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydSdW5QZXJmVGVzdCddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLkNlZlNoYXJwXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydDZWZTaGFycCddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLkNvYWNoSlNdID0ge1xuICAgICAgICAgICAgd2luZG93OiBbJ2VtaXQnXSxcbiAgICAgICAgfSxcbiAgICAgICAgX2FbQm90S2luZC5GTWluZXJdID0ge1xuICAgICAgICAgICAgd2luZG93OiBbJ2ZtZ2V0X3RhcmdldHMnXSxcbiAgICAgICAgfSxcbiAgICAgICAgX2FbQm90S2luZC5HZWJdID0ge1xuICAgICAgICAgICAgd2luZG93OiBbJ2dlYiddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLk5pZ2h0bWFyZUpTXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydfX25pZ2h0bWFyZScsICduaWdodG1hcmUnXSxcbiAgICAgICAgfSxcbiAgICAgICAgX2FbQm90S2luZC5QaGFudG9tYXNdID0ge1xuICAgICAgICAgICAgd2luZG93OiBbJ19fcGhhbnRvbWFzJ10sXG4gICAgICAgIH0sXG4gICAgICAgIF9hW0JvdEtpbmQuUGhhbnRvbUpTXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydjYWxsUGhhbnRvbScsICdfcGhhbnRvbSddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLlJoaW5vXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydzcGF3biddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLlNlbGVuaXVtXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydfU2VsZW5pdW1fSURFX1JlY29yZGVyJywgJ19zZWxlbml1bScsICdjYWxsZWRTZWxlbml1bScsIC9eKFthLXpdKXszfV8uKl8oQXJyYXl8UHJvbWlzZXxTeW1ib2wpJC9dLFxuICAgICAgICAgICAgZG9jdW1lbnQ6IFsnX19zZWxlbml1bV9ldmFsdWF0ZScsICdzZWxlbml1bS1ldmFsdWF0ZScsICdfX3NlbGVuaXVtX3Vud3JhcHBlZCddLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLldlYkRyaXZlcklPXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWyd3ZGlvRWxlY3Ryb24nXSxcbiAgICAgICAgfSxcbiAgICAgICAgX2FbQm90S2luZC5XZWJEcml2ZXJdID0ge1xuICAgICAgICAgICAgd2luZG93OiBbXG4gICAgICAgICAgICAgICAgJ3dlYmRyaXZlcicsXG4gICAgICAgICAgICAgICAgJ19fd2ViZHJpdmVyRnVuYycsXG4gICAgICAgICAgICAgICAgJ19fbGFzdFdhdGlyQWxlcnQnLFxuICAgICAgICAgICAgICAgICdfX2xhc3RXYXRpckNvbmZpcm0nLFxuICAgICAgICAgICAgICAgICdfX2xhc3RXYXRpclByb21wdCcsXG4gICAgICAgICAgICAgICAgJ19XRUJEUklWRVJfRUxFTV9DQUNIRScsXG4gICAgICAgICAgICAgICAgJ0Nocm9tZURyaXZlcncnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGRvY3VtZW50OiBbXG4gICAgICAgICAgICAgICAgJ19fd2ViZHJpdmVyX3NjcmlwdF9mbicsXG4gICAgICAgICAgICAgICAgJ19fZHJpdmVyX2V2YWx1YXRlJyxcbiAgICAgICAgICAgICAgICAnX193ZWJkcml2ZXJfZXZhbHVhdGUnLFxuICAgICAgICAgICAgICAgICdfX2Z4ZHJpdmVyX2V2YWx1YXRlJyxcbiAgICAgICAgICAgICAgICAnX19kcml2ZXJfdW53cmFwcGVkJyxcbiAgICAgICAgICAgICAgICAnX193ZWJkcml2ZXJfdW53cmFwcGVkJyxcbiAgICAgICAgICAgICAgICAnX19meGRyaXZlcl91bndyYXBwZWQnLFxuICAgICAgICAgICAgICAgICdfX3dlYmRyaXZlcl9zY3JpcHRfZm4nLFxuICAgICAgICAgICAgICAgICdfX3dlYmRyaXZlcl9zY3JpcHRfZnVuYycsXG4gICAgICAgICAgICAgICAgJ19fd2ViZHJpdmVyX3NjcmlwdF9mdW5jdGlvbicsXG4gICAgICAgICAgICAgICAgJyRjZGNfYXNkamZsYXN1dG9wZmh2Y1pMbWNmJyxcbiAgICAgICAgICAgICAgICAnJGNkY19hc2RqZmxhc3V0b3BmaHZjWkxtY2ZsXycsXG4gICAgICAgICAgICAgICAgJyRjaHJvbWVfYXN5bmNTY3JpcHRJbmZvJyxcbiAgICAgICAgICAgICAgICAnX18kd2ViZHJpdmVyQXN5bmNFeGVjdXRvcicsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgICBfYVtCb3RLaW5kLkhlYWRsZXNzQ2hyb21lXSA9IHtcbiAgICAgICAgICAgIHdpbmRvdzogWydkb21BdXRvbWF0aW9uJywgJ2RvbUF1dG9tYXRpb25Db250cm9sbGVyJ10sXG4gICAgICAgIH0sXG4gICAgICAgIF9hKTtcbiAgICB2YXIgYm90TmFtZTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIHdpbmRvd1Byb3BzID0gZ2V0T2JqZWN0UHJvcHMod2luZG93KTtcbiAgICB2YXIgZG9jdW1lbnRQcm9wcyA9IFtdO1xuICAgIGlmICh3aW5kb3cuZG9jdW1lbnQgIT09IHVuZGVmaW5lZClcbiAgICAgICAgZG9jdW1lbnRQcm9wcyA9IGdldE9iamVjdFByb3BzKHdpbmRvdy5kb2N1bWVudCk7XG4gICAgZm9yIChib3ROYW1lIGluIGRpc3RpbmN0aXZlUHJvcHNMaXN0KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGRpc3RpbmN0aXZlUHJvcHNMaXN0W2JvdE5hbWVdO1xuICAgICAgICBpZiAocHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHdpbmRvd0NvbnRhaW5zID0gcHJvcHMud2luZG93ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IGluY2x1ZGVzLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbd2luZG93UHJvcHNdLCBwcm9wcy53aW5kb3csIGZhbHNlKSk7XG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRDb250YWlucyA9IHByb3BzLmRvY3VtZW50ID09PSB1bmRlZmluZWQgfHwgIWRvY3VtZW50UHJvcHMubGVuZ3RoID8gZmFsc2UgOiBpbmNsdWRlcy5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2RvY3VtZW50UHJvcHNdLCBwcm9wcy5kb2N1bWVudCwgZmFsc2UpKTtcbiAgICAgICAgICAgIHJlc3VsdFtib3ROYW1lXSA9IHdpbmRvd0NvbnRhaW5zIHx8IGRvY3VtZW50Q29udGFpbnM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGRldGVjdG9ycyB9IGZyb20gJy4vZGV0ZWN0b3JzJztcbmltcG9ydCB7IHNvdXJjZXMgfSBmcm9tICcuL3NvdXJjZXMnO1xuaW1wb3J0IHsgQm90ZEVycm9yLCBCb3RLaW5kLCB9IGZyb20gJy4vdHlwZXMnO1xuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBib3QgZGV0ZWN0b3IuXG4gKlxuICogQGNsYXNzXG4gKiBAaW1wbGVtZW50cyB7Qm90RGV0ZWN0b3JJbnRlcmZhY2V9XG4gKi9cbnZhciBCb3REZXRlY3RvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCb3REZXRlY3RvcigpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRldGVjdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIEJvdERldGVjdG9yLnByb3RvdHlwZS5nZXRDb21wb25lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRzO1xuICAgIH07XG4gICAgQm90RGV0ZWN0b3IucHJvdG90eXBlLmdldERldGVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRldGVjdGlvbnM7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2V4cGxpY2l0LW1vZHVsZS1ib3VuZGFyeS10eXBlc1xuICAgIEJvdERldGVjdG9yLnByb3RvdHlwZS5nZXRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbW9kdWxlLWJvdW5kYXJ5LXR5cGVzXG4gICAgQm90RGV0ZWN0b3IucHJvdG90eXBlLmdldERldGVjdG9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGRldGVjdG9ycztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBpbmhlcml0ZG9jXG4gICAgICovXG4gICAgQm90RGV0ZWN0b3IucHJvdG90eXBlLmRldGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb3REZXRlY3Rvci5kZXRlY3QgY2FuJ3QgYmUgY2FsbGVkIGJlZm9yZSBCb3REZXRlY3Rvci5jb2xsZWN0XCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb21wb25lbnRzID0gdGhpcy5jb21wb25lbnRzO1xuICAgICAgICB2YXIgZGV0ZWN0b3JzID0gdGhpcy5nZXREZXRlY3RvcnMoKTtcbiAgICAgICAgdmFyIGRldGVjdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIGZpbmFsRGV0ZWN0aW9uID0ge1xuICAgICAgICAgICAgYm90OiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgZGV0ZWN0b3JOYW1lIGluIGRldGVjdG9ycykge1xuICAgICAgICAgICAgdmFyIGRldGVjdG9yID0gZGV0ZWN0b3JzW2RldGVjdG9yTmFtZV07XG4gICAgICAgICAgICB2YXIgZGV0ZWN0b3JSZXMgPSBkZXRlY3Rvcihjb21wb25lbnRzKTtcbiAgICAgICAgICAgIHZhciBkZXRlY3Rpb24gPSB7IGJvdDogZmFsc2UgfTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGV0ZWN0b3JSZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZGV0ZWN0aW9uID0geyBib3Q6IHRydWUsIGJvdEtpbmQ6IGRldGVjdG9yUmVzIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkZXRlY3RvclJlcykge1xuICAgICAgICAgICAgICAgIGRldGVjdGlvbiA9IHsgYm90OiB0cnVlLCBib3RLaW5kOiBCb3RLaW5kLlVua25vd24gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRldGVjdGlvbnNbZGV0ZWN0b3JOYW1lXSA9IGRldGVjdGlvbjtcbiAgICAgICAgICAgIGlmIChkZXRlY3Rpb24uYm90KSB7XG4gICAgICAgICAgICAgICAgZmluYWxEZXRlY3Rpb24gPSBkZXRlY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXRlY3Rpb25zID0gZGV0ZWN0aW9ucztcbiAgICAgICAgcmV0dXJuIGZpbmFsRGV0ZWN0aW9uO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGluaGVyaXRkb2NcbiAgICAgKi9cbiAgICBCb3REZXRlY3Rvci5wcm90b3R5cGUuY29sbGVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZXMsIGNvbXBvbmVudHMsIHNvdXJjZXNLZXlzO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXMgPSB0aGlzLmdldFNvdXJjZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudHMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZXNLZXlzID0gT2JqZWN0LmtleXMoc291cmNlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbChzb3VyY2VzS2V5cy5tYXAoZnVuY3Rpb24gKHNvdXJjZUtleSkgeyByZXR1cm4gX19hd2FpdGVyKF90aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2IsIGVycm9yXzE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfZC5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gc291cmNlc1tzb3VyY2VLZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZC5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZC50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSA9IGNvbXBvbmVudHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gc291cmNlS2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtfYl0gPSAoX2MudmFsdWUgPSBfZC5zZW50KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy5zdGF0ZSA9IDAgLyogU3RhdGUuU3VjY2VzcyAqLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Quc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JfMSBpbnN0YW5jZW9mIEJvdGRFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tzb3VyY2VLZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBlcnJvcl8xLnN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBcIlwiLmNvbmNhdChlcnJvcl8xLm5hbWUsIFwiOiBcIikuY29uY2F0KGVycm9yXzEubWVzc2FnZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1tzb3VyY2VLZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAtMyAvKiBTdGF0ZS5VbmV4cGVjdGVkQmVoYXZpb3VyICovLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcl8xIGluc3RhbmNlb2YgRXJyb3IgPyBcIlwiLmNvbmNhdChlcnJvcl8xLm5hbWUsIFwiOiBcIikuY29uY2F0KGVycm9yXzEubWVzc2FnZSkgOiBTdHJpbmcoZXJyb3JfMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSkpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzID0gY29tcG9uZW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLmNvbXBvbmVudHNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBCb3REZXRlY3Rvcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBCb3REZXRlY3RvcjtcbiIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IEJvdERldGVjdG9yIGZyb20gJy4vZGV0ZWN0b3InO1xuaW1wb3J0IHsgc291cmNlcyB9IGZyb20gJy4vc291cmNlcyc7XG5pbXBvcnQgeyBCb3RkRXJyb3IsIEJvdEtpbmQgfSBmcm9tICcuL3R5cGVzJztcbi8qKlxuICogU2VuZHMgYW4gdW5wZXJzb25hbGl6ZWQgQUpBWCByZXF1ZXN0IHRvIGNvbGxlY3QgaW5zdGFsbGF0aW9uIHN0YXRpc3RpY3NcbiAqL1xuZnVuY3Rpb24gbW9uaXRvcigpIHtcbiAgICAvLyBUaGUgRmluZ2VycHJpbnRKUyBDRE4gKGh0dHBzOi8vZ2l0aHViLmNvbS9maW5nZXJwcmludGpzL2NkbikgcmVwbGFjZXMgYHdpbmRvdy5fX2ZwanNfZF9tYCB3aXRoIGB0cnVlYFxuICAgIGlmICh3aW5kb3cuX19mcGpzX2RfbSB8fCBNYXRoLnJhbmRvbSgpID49IDAuMDAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKCdnZXQnLCBcImh0dHBzOi8vbTEub3BlbmZwY2RuLmlvL2JvdGQvdlwiLmNvbmNhdCh2ZXJzaW9uLCBcIi9ucG0tbW9uaXRvcmluZ1wiKSwgdHJ1ZSk7XG4gICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gY29uc29sZS5lcnJvciBpcyBvayBoZXJlIGJlY2F1c2UgaXQncyBhbiB1bmV4cGVjdGVkIGVycm9yIGhhbmRsZXJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGxvYWQob3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZXRlY3RvcjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tb25pdG9yaW5nKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25pdG9yKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0b3IgPSBuZXcgQm90RGV0ZWN0b3IoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZGV0ZWN0b3IuY29sbGVjdCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRldGVjdG9yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZGVmYXVsdCB7IGxvYWQ6IGxvYWQgfTtcbi8vIFRoZSBleHBvcnRzIGJlbG93IGFyZSBmb3IgcHJpdmF0ZSB1c2FnZS4gVGhleSBtYXkgY2hhbmdlIHVuZXhwZWN0ZWRseS4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzay5cbi8qKiBOb3QgZG9jdW1lbnRlZCwgb3V0IG9mIFNlbWFudGljIFZlcnNpb25pbmcsIHVzYWdlIGlzIGF0IHlvdXIgb3duIHJpc2sgKi9cbmV4cG9ydCB7IHNvdXJjZXMsIEJvdGRFcnJvciwgQm90S2luZCwgfTtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IF9fYXdhaXRlciwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGxvYWQgfSBmcm9tICcuLi9zcmMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlckVuZ2luZUtpbmQsIGdldEJyb3dzZXJLaW5kLCBnZXREb2N1bWVudEZvY3VzLCBnZXRNb3pBcHBlYXJhbmNlU3VwcG9ydCwgaXNBbmRyb2lkLCBpc0Rlc2t0b3BXZWJLaXQsIH0gZnJvbSAnLi4vc3JjL3V0aWxzL2Jyb3dzZXInO1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG52YXIgX3Jlc3VsdCA9IHVuZGVmaW5lZDtcbnZhciBydW5EZXRlY3Rpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB0MCwgaW5zdGFuY2UsIGNvbGxlY3Rpb25UaW1lLCBkZXRlY3Rpb25SZXN1bHQsIGRldGVjdGlvblRpbWUsIGNvbXBvbmVudHMsIGRldGVjdGlvbnMsIGRlYnVnRGF0YSwgZV8xO1xuICAgIHZhciBfYSwgX2I7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCAyLCAsIDNdKTtcbiAgICAgICAgICAgICAgICB0MCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWQoKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgaW5zdGFuY2UgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvblRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHQwO1xuICAgICAgICAgICAgICAgIGRldGVjdGlvblJlc3VsdCA9IGluc3RhbmNlLmRldGVjdCgpO1xuICAgICAgICAgICAgICAgIGRldGVjdGlvblRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHQwO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMgPSAoX2EgPSBpbnN0YW5jZS5nZXRDb21wb25lbnRzKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHt9O1xuICAgICAgICAgICAgICAgIGRldGVjdGlvbnMgPSAoX2IgPSBpbnN0YW5jZS5nZXREZXRlY3Rpb25zKCkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHt9O1xuICAgICAgICAgICAgICAgIGRlYnVnRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYnJvd3NlckVuZ2luZUtpbmQ6IGdldEJyb3dzZXJFbmdpbmVLaW5kKCksXG4gICAgICAgICAgICAgICAgICAgIGJyb3dzZXJLaW5kOiBnZXRCcm93c2VyS2luZCgpLFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudEZvY3VzOiBnZXREb2N1bWVudEZvY3VzKCksXG4gICAgICAgICAgICAgICAgICAgIG1vekFwcGVhcmFuY2VTdXBwb3J0OiBnZXRNb3pBcHBlYXJhbmNlU3VwcG9ydCgpLFxuICAgICAgICAgICAgICAgICAgICBpc0FuZHJvaWQ6IGlzQW5kcm9pZCgpLFxuICAgICAgICAgICAgICAgICAgICBpc0Rlc2t0b3BXZWJLaXQ6IGlzRGVza3RvcFdlYktpdCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvblRpbWU6IGNvbGxlY3Rpb25UaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0aW9uVGltZTogZGV0ZWN0aW9uVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdGlvblJlc3VsdDogZGV0ZWN0aW9uUmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0ZWN0ZWRCb3Q6IChkZXRlY3Rpb25SZXN1bHQgPT09IG51bGwgfHwgZGV0ZWN0aW9uUmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXRlY3Rpb25SZXN1bHQuYm90KSA/IGRldGVjdGlvblJlc3VsdC5ib3RLaW5kIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkRGF0YTogY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVjdG9yc1Jlc3VsdHM6IGRldGVjdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z0RhdGE6IGRlYnVnRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgfV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZV8xID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7IGlzRXJyb3I6IHRydWUsIGVycm9yOiBlXzEgfV07XG4gICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG52YXIgcmVuZGVyRGV0ZWN0aW9uUmVzdWx0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHZhciByZXN1bHRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXN1bHQnKTtcbiAgICB2YXIgcmVzdWx0VGV4dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3VsdC10ZXh0Jyk7XG4gICAgdmFyIGNvbGxlY3Rpb25UaW1lRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29sbGVjdGlvbi10aW1lJyk7XG4gICAgdmFyIGRldGVjdGlvblRpbWVFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRlY3Rpb24tdGltZScpO1xuICAgIHZhciBkZXRlY3Rpb25SZXN1bHRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRlY3Rpb24tcmVzdWx0Jyk7XG4gICAgdmFyIGRldGVjdG9yc0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RldGVjdG9ycycpO1xuICAgIHZhciBkZWJ1Z0RhdGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVidWctZGF0YScpO1xuICAgIHZhciBjb2xsZWN0ZWREYXRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbGxlY3RlZC1kYXRhJyk7XG4gICAgdmFyIGVycm9yQ29udGFpbmVyRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXJyb3ItY29udGFpbmVyJyk7XG4gICAgdmFyIGVycm9yTWVzc2FnZUVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vycm9yLW1lc3NhZ2UnKTtcbiAgICByZXN1bHRFbC5jbGFzc0xpc3QucmVtb3ZlKCdyZXN1bHQtZGV0ZWN0ZWQnLCAncmVzdWx0LWVycm9yJyk7XG4gICAgaWYgKHJlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgIHJlc3VsdFRleHRFbC5pbm5lckhUTUwgPSAnQW4gZXJyb3Igb2NjdXJlZCc7XG4gICAgICAgIHJlc3VsdEVsLmNsYXNzTGlzdC5hZGQoJ3Jlc3VsdC1lcnJvcicpO1xuICAgICAgICBlcnJvckNvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoJ2Vycm9yLWNvbnRhaW5lci12aXNpYmxlJyk7XG4gICAgICAgIGVycm9yTWVzc2FnZUVsLnRleHRDb250ZW50ID0gcmVzdWx0LmVycm9yLm1lc3NhZ2U7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXJyb3JDb250YWluZXJFbC5jbGFzc0xpc3QucmVtb3ZlKCdlcnJvci1jb250YWluZXItdmlzaWJsZScpO1xuICAgIGlmIChyZXN1bHQuZGV0ZWN0ZWRCb3QgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHRUZXh0RWwuaW5uZXJIVE1MID0gXCJcIi5jb25jYXQocmVzdWx0LmRldGVjdGVkQm90LCBcIiBkZXRlY3RlZC5cIik7XG4gICAgICAgIHJlc3VsdEVsLmNsYXNzTGlzdC5hZGQoJ3Jlc3VsdC1kZXRlY3RlZCcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0VGV4dEVsLmlubmVySFRNTCA9ICdZb3UgYXJlIG5vdCBhIGJvdC4nO1xuICAgIH1cbiAgICBjb2xsZWN0aW9uVGltZUVsLnRleHRDb250ZW50ID0gXCJcIi5jb25jYXQocmVzdWx0LmNvbGxlY3Rpb25UaW1lLnRvRml4ZWQoMiksIFwibXNcIik7XG4gICAgZGV0ZWN0aW9uVGltZUVsLnRleHRDb250ZW50ID0gXCJcIi5jb25jYXQocmVzdWx0LmRldGVjdGlvblRpbWUudG9GaXhlZCgyKSwgXCJtc1wiKTtcbiAgICBkZXRlY3Rpb25SZXN1bHRFbC50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdC5kZXRlY3Rpb25SZXN1bHQsIG51bGwsIDQpO1xuICAgIGRldGVjdG9yc0VsLnRleHRDb250ZW50ID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0LmRldGVjdG9yc1Jlc3VsdHMsIG51bGwsIDQpO1xuICAgIGRlYnVnRGF0YS50ZXh0Q29udGVudCA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdC5kZWJ1Z0RhdGEsIG51bGwsIDQpO1xuICAgIGNvbGxlY3RlZERhdGEudGV4dENvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShyZXN1bHQuY29sbGVjdGVkRGF0YSwgbnVsbCwgNCk7XG59O1xudmFyIHJ1bkFuZFJlbmRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgcnVuRGV0ZWN0aW9uKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBfcmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHJlbmRlckRldGVjdGlvblJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZXRlY3RCdXR0b25FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXRlY3QtYnV0dG9uJyk7XG4gICAgdmFyIGNvcHlMb2dzQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvcHktbG9ncy1idXR0b24nKTtcbiAgICBkZXRlY3RCdXR0b25FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcnVuQW5kUmVuZGVyKCk7XG4gICAgfSk7XG4gICAgY29weUxvZ3NCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KEpTT04uc3RyaW5naWZ5KF9yZXN1bHQpKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdCb3REIGxvZ3MgY29waWVkIHRvIGNsaXBib2FyZCcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBydW5BbmRSZW5kZXIoKTtcbn07XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsImRvbmUiLCJ0aGVuIiwiX19nZW5lcmF0b3IiLCJib2R5IiwiZiIsInkiLCJ0IiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ2Iiwib3AiLCJUeXBlRXJyb3IiLCJwb3AiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImFyIiwibCIsImNyZWF0ZSIsIkJvdEtpbmQiLCJCb3RkRXJyb3IiLCJfc3VwZXIiLCJzdGF0ZSIsIm1lc3NhZ2UiLCJfdGhpcyIsIm5hbWUiLCJfXyIsImNvbnN0cnVjdG9yIiwiX19leHRlbmRzIiwiYXJyYXlJbmNsdWRlcyIsImFyciIsImluZGV4T2YiLCJzdHJJbmNsdWRlcyIsInN0ciIsImdldE9iamVjdFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImluY2x1ZGVzIiwia2V5cyIsIl9sb29wXzEiLCJhcnJheSIsImNhbGxiYWNrIiwiZmluZCIsImFycmF5RmluZCIsIl9hIiwia2V5c18xIiwic3RhdGVfMSIsInZhbHVlcyIsInJlZHVjZSIsInN1bSIsImdldEJyb3dzZXJFbmdpbmVLaW5kIiwiX2IiLCJ3IiwibmF2aWdhdG9yIiwidmVuZG9yIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0QnJvd3NlcktpbmQiLCJ1c2VyQWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImlzQW5kcm9pZCIsImJyb3dzZXJFbmdpbmVLaW5kIiwiaXNJdENocm9taXVtIiwiaXNJdEdlY2tvIiwiYXBwVmVyc2lvbiIsImdldE1vekFwcGVhcmFuY2VTdXBwb3J0IiwiQ1NTIiwiZ2V0RG9jdW1lbnRGb2N1cyIsImhhc0ZvY3VzIiwiZGV0ZWN0b3JzIiwiZGV0ZWN0QXBwVmVyc2lvbiIsImRldGVjdERvY3VtZW50QXR0cmlidXRlcyIsImRvY3VtZW50RWxlbWVudEtleXMiLCJkZXRlY3RFcnJvclRyYWNlIiwiZXJyb3JUcmFjZSIsImRldGVjdEV2YWxMZW5ndGhJbmNvbnNpc3RlbmN5IiwiZXZhbExlbmd0aCIsImJyb3dzZXIiLCJicm93c2VyRW5naW5lIiwiZGV0ZWN0RnVuY3Rpb25CaW5kIiwiZnVuY3Rpb25CaW5kIiwiZGV0ZWN0TGFuZ3VhZ2VzTGVuZ3RoSW5jb25zaXN0ZW5jeSIsImxhbmd1YWdlcyIsImRldGVjdE5vdGlmaWNhdGlvblBlcm1pc3Npb25zIiwibm90aWZpY2F0aW9uUGVybWlzc2lvbnMiLCJkZXRlY3RQbHVnaW5zQXJyYXkiLCJwbHVnaW5zQXJyYXkiLCJkZXRlY3RQbHVnaW5zTGVuZ3RoSW5jb25zaXN0ZW5jeSIsInBsdWdpbnNMZW5ndGgiLCJicm93c2VyS2luZCIsImRldGVjdFByb2Nlc3MiLCJwcm9jZXNzIiwidHlwZSIsInZlcnNpb25zIiwiZWxlY3Ryb24iLCJkZXRlY3RVc2VyQWdlbnQiLCJkZXRlY3RXZWJEcml2ZXIiLCJ3ZWJEcml2ZXIiLCJkZXRlY3RXZWJHTCIsIndlYkdMIiwicmVuZGVyZXIiLCJkZXRlY3RXaW5kb3dFeHRlcm5hbCIsIndpbmRvd0V4dGVybmFsIiwiZGV0ZWN0V2luZG93U2l6ZSIsIndpbmRvd1NpemUiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJkZXRlY3RNaW1lVHlwZXNDb25zaXN0ZW50IiwibWltZVR5cGVzQ29uc2lzdGVudCIsImRldGVjdFByb2R1Y3RTdWIiLCJwcm9kdWN0U3ViIiwiZGV0ZWN0RGlzdGluY3RpdmVQcm9wZXJ0aWVzIiwiZGlzdGluY3RpdmVQcm9wcyIsImJvdCIsInJ0dCIsImNvbm5lY3Rpb24iLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJwbHVnaW5zIiwiUGx1Z2luQXJyYXkiLCJlcnJvciIsInN0YWNrIiwiZXh0ZXJuYWwiLCJtaW1lVHlwZXMiLCJpc0NvbnNpc3RlbnQiLCJnZXRQcm90b3R5cGVPZiIsIk1pbWVUeXBlQXJyYXkiLCJNaW1lVHlwZSIsImV2YWwiLCJjYW52YXNFbGVtZW50IiwiZ2V0Q29udGV4dCIsIndlYkdMQ29udGV4dCIsImdldFBhcmFtZXRlciIsIlZFTkRPUiIsIlJFTkRFUkVSIiwid2ViZHJpdmVyIiwibGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJicm93c2VyTGFuZ3VhZ2UiLCJzeXN0ZW1MYW5ndWFnZSIsImlzQXJyYXkiLCJJbnRsIiwiUmVmbGVjdCIsInNwbGl0IiwicGVybWlzc2lvbnMiLCJwZXJtaXNzaW9uU3RhdHVzIiwiTm90aWZpY2F0aW9uIiwicXVlcnkiLCJwZXJtaXNzaW9uIiwiZ2V0QXR0cmlidXRlTmFtZXMiLCJiaW5kIiwiYm90TmFtZSIsImRpc3RpbmN0aXZlUHJvcHNMaXN0Iiwid2luZG93UHJvcHMiLCJkb2N1bWVudFByb3BzIiwicHJvcHMiLCJ3aW5kb3dDb250YWlucyIsImRvY3VtZW50Q29udGFpbnMiLCJCb3REZXRlY3RvciIsImNvbXBvbmVudHMiLCJkZXRlY3Rpb25zIiwiZ2V0Q29tcG9uZW50cyIsImdldERldGVjdGlvbnMiLCJnZXRTb3VyY2VzIiwiZ2V0RGV0ZWN0b3JzIiwiZGV0ZWN0IiwiZmluYWxEZXRlY3Rpb24iLCJkZXRlY3Rvck5hbWUiLCJkZXRlY3RvclJlcyIsImRldGVjdG9yIiwiZGV0ZWN0aW9uIiwiYm90S2luZCIsImNvbGxlY3QiLCJzb3VyY2VzS2V5cyIsImFsbCIsInNvdXJjZUtleSIsInJlcyIsImVycm9yXzEiLCJfYyIsIl9kIiwibG9hZCIsIm1vbml0b3JpbmciLCJfX2ZwanNfZF9tIiwiTWF0aCIsInJhbmRvbSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZW5kIiwiY29uc29sZSIsIm1vbml0b3IiLCJfcmVzdWx0IiwicnVuQW5kUmVuZGVyIiwidDAiLCJpbnN0YW5jZSIsImNvbGxlY3Rpb25UaW1lIiwiZGV0ZWN0aW9uUmVzdWx0IiwiZGV0ZWN0aW9uVGltZSIsImRlYnVnRGF0YSIsInBlcmZvcm1hbmNlIiwibm93IiwiZG9jdW1lbnRGb2N1cyIsIm1vekFwcGVhcmFuY2VTdXBwb3J0IiwiaXNEZXNrdG9wV2ViS2l0IiwiSFRNTEVsZW1lbnQiLCJEb2N1bWVudCIsImlzRXJyb3IiLCJkZXRlY3RlZEJvdCIsImNvbGxlY3RlZERhdGEiLCJkZXRlY3RvcnNSZXN1bHRzIiwicmVzdWx0RWwiLCJnZXRFbGVtZW50QnlJZCIsInJlc3VsdFRleHRFbCIsImNvbGxlY3Rpb25UaW1lRWwiLCJkZXRlY3Rpb25UaW1lRWwiLCJkZXRlY3Rpb25SZXN1bHRFbCIsImRldGVjdG9yc0VsIiwiZXJyb3JDb250YWluZXJFbCIsImVycm9yTWVzc2FnZUVsIiwiY2xhc3NMaXN0IiwiaW5uZXJIVE1MIiwiYWRkIiwidGV4dENvbnRlbnQiLCJ0b0ZpeGVkIiwicmVuZGVyRGV0ZWN0aW9uUmVzdWx0Iiwib25sb2FkIiwiZGV0ZWN0QnV0dG9uRWwiLCJjb3B5TG9nc0J1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbGlwYm9hcmQiLCJ3cml0ZVRleHQiLCJhbGVydCJdLCJzb3VyY2VSb290IjoiIn0=